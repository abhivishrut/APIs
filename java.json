[
    {
        "id": "01",
        "name": "Introduction",
        "message": "🔴 Java ek object-oriented programming language hai jo Sun Microsystems dwara 1995 me develop ki gayi thi. Iska main aim tha “Write Once, Run Anywhere” yani ek baar code likho aur use kisi bhi platform par run karo jahan Java Virtual Machine (JVM) uplabdh ho.\n\n📌~1. Platform Independent: Java bytecode kisi bhi platform par run ho sakta hai jo JVM ko support karta hai. Iska matlab hai ki aap ek hi program ko kisi bhi operating system jaise ki Windows, Linux, ya Mac par run kar sakte hain.\n\n📌~2. Object-Oriented: Java ek pure object-oriented programming language hai. Isme sab kuch object aur class ke form me hota hai.\n\n📌~3. Robust: Java strong memory management ke saath aata hai, jisme automatic garbage collection hota hai. Iske alawa, exception handling aur type checking features isko robust banate hain.\n\n📌~4. Secure: Java me security features built-in hote hain, jisse aap secure applications develop kar sakte hain.\n\n📌~5. Multithreading: Java me multithreading support hota hai, jisse aap multiple tasks simultaneously run kar sakte hain.",
        "example":"0",
        "remcont":"🔴 Java programming language ka use widely software development, mobile applications (specially Android apps), web applications, web servers, application servers, games, database connection, aur bahut kuch me hota hai. Java seekhna ek achha decision ho sakta hai agar aap software development me career banana chahte hain."
    },
    {
        "id": "02",
        "name": "Installation",
        "message": "🔴 Java programming language ko install karne ke liye, aapko neeche diye gaye steps follow karne honge:\n\n📌~1. Java Development Kit (JDK) Download karein: Sabse pehle aapko Oracle ki official website par jakar Java Development Kit (JDK) download karna hoga. Aap yahan se latest version download kar sakte hain: Oracle’s official website.\n\n📌~2. JDK Install karein: Download hone ke baad, JDK installer ko run karein aur instructions follow karte hue JDK ko install karein.\n\n📌~3. Environment Variables set karein: JDK install hone ke baad, aapko JAVA_HOME environment variable set karna hoga. Iske liye aap System Properties -> Advanced -> Environment Variables me jayein, aur new environment variable create karein jiska naam JAVA_HOME ho aur value JDK ke installation directory ho.\n\n📌~4. Path Variable Update karein: Ab aapko Path environment variable update karna hoga. Iske liye Environment Variables window me Path variable dhundhein, edit karein, aur new entry add karein jisme JAVA_HOME variable ka path ho, jaise %JAVA_HOME%\bin.\n\n📌~5. Installation Verify karein: Sabse last me, aap apne computer ke command prompt ya terminal open karein, aur java -version command run karein. Agar yeh command successfully run hoti hai aur Java ka version show hota hai, toh iska matlab hai ki Java sahi se install ho gaya hai.",
        "example":"0",
        "remcont":"🔴 Java installation process thoda lamba ho sakta hai, lekin yeh steps follow karne se aap easily Java install kar sakte hain."
    },
    {
        "id": "03",
        "name": "Java Syntax",
        "message": "🔴 Java programming language ka ek basic syntax aapko samajhne me madad karega. Yeh ek “Hello, World!” program hai:",
        "example": "class HelloJava {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "remcont": "Is program ko samajhne ke liye, hum iske har hisse ko dekhte hain:\n\n📌 public class HelloWorld: Yeh line ek naya class define karti hai jiska naam HelloWorld hai. Java me, har program ka ek main class hota hai jisme main method hota hai.\n\n📌 public static void main(String[] args): Yeh line Java program ka main method hai. Jab aap Java program ko run karte hain, toh yeh main method sabse pehle run hota hai.\n\n📌 System.out.println(\"Hello, World!\");: Yeh line console par “Hello, World!” print karta hai.\n\n🔴 Java programming language ke bahut saare features hain jaise ki object-oriented programming, automatic memory management, robustness, simplicity, portability, etc. Jo ise anya programming languages se alag banate hain."
    },
    {
        "id": "04",
        "name": "Comments",
        "message": "🔴 Java programming me comments code ki readability badhane ke liye use kiye jate hain. Comments ko Java compiler ignore karta hai. Java me teen tarah ke comments hote hain:\n\n📌~1. Single-Line Comments: Single-line comments ek line ke liye hota hai aur // se start hota hai.\n\n📌~2. Multi-Line Comments: Multi-line comments multiple lines ke liye hote hain aur /* se start hote hain aur */ se end hote hain.\n\n📌~3. Documentation Comments: Documentation comments code documentation generate karne ke liye use kiye jate hain. Ye /** se start hote hain aur */ se end hote hain.",
        "example": "// Yeh ek single-line comment hai\n\n\n/*\nYeh ek\nmulti-line comment hai\n*/\n\n\n/**\nYeh ek documentation comment hai\n*/",
        "remcont": "🔴 Comments ka use karke aap apne code ko aur adhik samajhne layak bana sakte hain. Ye code ko padhne wale ke liye helpful hota hai ki code kya kar raha hai."
    },
    {
        "id": "05",
        "name": "Variables",
        "message": "🔴 Java programming me variables data store karne ke liye use kiye jate hain. Har variable ka ek unique naam (identifier) hota hai. Java me variables declare karne ke liye, aapko variable ka data type aur naam specify karna hota hai.",
        "example": "// Integer (whole number)\nint myInt = 10;\n\n// Double (floating point number)\ndouble myDouble = 5.75;\n\n// Character (single character)\nchar myChar = 'A';\n\n// Boolean (true or false)\nboolean myBoolean = true;\n\n// String (sequence of characters)\nString myString = \"Hello, World!\";",
        "remcont": "Java me different types ke variables hote hain, jaise ki:\n\n📌~int: integer values ke liye.\n📌~double: floating point numbers ke liye.\n📌~char: single characters ke liye.\n📌~boolean: true ya false values ke liye.\n📌~String: text ya strings ke liye.\n\n🔴 Variables ka use karke aap apne code ko flexible aur reusable bana sakte hain. Aap ek variable ki value ko badal sakte hain, aur us variable ka use apne code me kahin bhi kar sakte hain. Java me variables ka use karna ek basic aur important concept hai."
    },
    {
        "id": "06",
        "name": "Final Variables",
        "message": "🔴 Java me final keyword ka use variables, methods, aur classes ko “final” yaani unchangeable banane ke liye kiya jata hai.\n\nJab final keyword ek variable ke saath use hota hai, toh us variable ki value change nahi ki ja sakti. Iska matlab hai ki ek baar final variable ko initialize kar diya gaya ho, toh uski value badal nahi sakti.\n\nYahan ek example hai:",
        "example": "final int MY_NUMBER = 10;",
        "remcont": "Is example me, MY_NUMBER ek final variable hai jiska data type int hai aur value 10 hai. Ab MY_NUMBER ki value change nahi ki ja sakti. Agar aap iski value change karne ki koshish karenge, toh compiler ek error dega.\n\n🔴 final variables ka use constants define karne me kiya jata hai, jaise ki mathematical constants (PI, E), ya phir koi value jo program ke run hone ke dauraan change nahi honi chahiye. Java me final keyword ka use karna ek important concept hai."
    },
    {
        "id": "07",
        "name": "Data Types",
        "message": "🔴 Java programming language me do tarah ke data types hote hain: primitive aur non-primitive.\n\n📌~1. Primitive Data Types: Ye built-in data types hote hain aur directly value store karte hain. Inme byte, short, int, long, float, double, boolean, aur char aate hain.\n\n📌~2. Non-Primitive Data Types: Ye reference ya object data types hote hain aur reference store karte hain. Inme String, Array, Class, Interface, etc. aate hain.",
        "example": "int myNumber = 5; // Yahan 'int' ek primitive data type hai\n\n\nString myString = \"Hello, World!\"; // Yahan 'String' ek non-primitive data type hai",
        "remcont": "🔴 Har data type ka apna ek specific size aur value range hota hai. Jaise ki int type variable 4 bytes ka hota hai aur -2,147,483,648 se 2,147,483,647 tak ki values store kar sakta hai. Isi tarah char type variable 2 bytes ka hota hai aur Unicode characters store kar sakta hai.\n\n🔴 Java me data types ka use karke aap apne program me different types ke data ko store aur manipulate kar sakte hain. Ye ek basic aur important concept hai Java programming me."
    },
    {
        "id": "08",
        "name": "Operators",
        "message": "Java programming me kai tarah ke operators hote hain jo alag-alag operations perform karte hain:\n\n~1. Arithmetic Operators: Ye basic mathematical operations perform karte hain. Jaise ki addition (+), subtraction (-), multiplication (*), division (/), aur modulus (%).\n\n~2. Relational Operators: Ye do values ke beech ke relationship check karte hain. Jaise ki equal to (==), not equal to (!=), greater than (>), less than (<), greater than or equal to (>=), aur less than or equal to (<=).\n\n~3. Logical Operators: Ye boolean expressions ke beech ke logical operations perform karte hain. Jaise ki logical AND (&&), logical OR (||), aur logical NOT (!).\n\n~4.Assignment Operators: Ye variables ko values assign karne ke liye use kiye jate hain. Jaise ki equal to (=), plus equal to (+=), minus equal to (-=), multiply equal to (*=), divide equal to (/=), aur modulus equal to (%=).",
        "example": "//Arithmetic Operators\nint a = 10;\nint b = 20;\nint sum = a + b; // Yahan '+' ek arithmetic operator hai\n\n\n\n//Relational Operators\nif (a > b) {\n    System.out.println(\"a is greater than b\");\n}\n\n\n\n//Logical Operators\nif (a > 0 && b > 0) {\n    System.out.println(\"Both numbers are positive\");\n}\n\n\n\n//Assignment Operators\na += 5; // Yeh line 'a = a + 5;' ke equivalent hai.",
        "remcont": "Ye sirf kuch basic operators hain, Java me aur bhi operators hain jaise ki bitwise operators, ternary operator, etc. Jo aapko explore karna chahiye."
    },
    {
        "id": "09",
        "name": "Type Casting",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "10",
        "name": "String",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "11",
        "name": "if else",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "12",
        "name": "while Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "13",
        "name": "do while Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "14",
        "name": "for Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "15",
        "name": "continue Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "16",
        "name": "break Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "17",
        "name": "switch Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "18",
        "name": "Exception Handling",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "19",
        "name": "try catch",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "20",
        "name": "Array",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "21",
        "name": "Array Traversing",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "22",
        "name": "Multidimensional Array",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "23",
        "name": "OOPs Concepts",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "24",
        "name": "Class And Object",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "25",
        "name": "Static Members",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "26",
        "name": "Non-Static Members",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "27",
        "name": "Constructor",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "28",
        "name": "Access Modifiers",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "29",
        "name": "Encapsulation",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "30",
        "name": "Packages",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "31",
        "name": "Inheritance",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "32",
        "name": "Method Overloading",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "33",
        "name": "Method Overriding",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "34",
        "name": "super Keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "35",
        "name": "Polymorphism",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "36",
        "name": "Inner Class",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "37",
        "name": "Abstract Class",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "38",
        "name": "Interface",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "39",
        "name": "final Keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "40",
        "name": "Method Introduction",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "41",
        "name": "Parameterized Method",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "42",
        "name": "User input",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "43",
        "name": "Date and Time",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "44",
        "name": "ArrayList",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "45",
        "name": "LinkedList",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "46",
        "name": "HashMap",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "47",
        "name": "HashSet",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "48",
        "name": "Iterator",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "49",
        "name": "finally block",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "50",
        "name": "throw keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "51",
        "name": "File Handling",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "52",
        "name": "Create / Write File",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "53",
        "name": "Read File",
        "message": "",
        "example": "",
        "remcont": ""
    }
    
]

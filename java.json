[
    {
        "id": "01",
        "name": "Introduction",
        "message": "游린 Java ek general-purpose computer programming language hai. Iska developer Sun Microsystems tha, jinhein 2010 mein Oracle Corporation ne acquire kiya tha. Is language ko 1995 mein launch kiya gaya tha.\n\n游린 Java ek object-oriented programming language hai, jismein hum objects aur classes ka use karte hain. Ismein, humein ek codebase ko har platform par chalane ke liye compile karne ki zaroorat nahi hai. Isliye, Java ko \"write once, run anywhere\" approach ke naam se jaana jata hai.\n\n游린 Ismein, humein Java Virtual Machine (JVM) ke through program execute karna padta hai. JVM har platform par chalta hai, isliye Java ke code ko har jagah chalane ke liye compile karne ki zaroorat nahi hai.",
        "example":"0",
        "remcont":"游린 Java ke paar, humein web-based applications, mobile applications, desktop applications, enterprise applications, etc. banaane ke liye use kar sakte hain. Ismein, humein exception handling bhi kar sakte hain, jisse aap program ke dair-dair errors ko handle kar sakte hain.\n\n游린 Iske alawa, Java ek robust aur secure language hai, isliye iska use financial, healthcare, education, etc. industries mein bahut mahatvapurn hai. Ismein bahut se libraries aur frameworks bhi available hain, jisse hum aapke requirements ke anuroop applications bana sakte hain.\n\n游린 Java ke paar pichhle saalon mein bahut se updates aur version aaye hain, jaise ki Java 9, Java 10, Java 11, etc. Iske saath, bahut se new features aur improvements bhi aaye hain. Isliye, agar aap Java sikhna chahte hain, to aap iske naye versions ko bhi sikhna chahiye.\n\n"
    },
    {
        "id": "02",
        "name": "Installation",
        "message": "游린 Java ko install karne ke liye, aap Java Development Kit (JDK) ko apne computer par install karna chaahate hain. JDK ko Oracle website se download kar sakte hain.",
        "example":"0",
        "remcont":"游늷~1: Oracle website pe jaakar, \"Download JDK\" ko click karo.\n\n游늷~2: Apne computer ki operating system ke anuroop JDK ko download karo.\n\n游늷~3: JDK installer ko chalo aur installation process ko follow karo.\n\n游늷~4: Installation process mein, aapko ek screen milega jismein aapko \"Install\" button dikhaai dega. Is button ko click karo aur installation process shuru ho jaayegi.\n\n游늷~5: Installation process ke baad, aapka computer mein Java install ho jaayega.\n\n游늷~6: Installation ke baad, aapke system ke PATH variable ko update karna chaahiye hai. PATH variable ko update karne ke liye, aapko system settings ke settings mein jaana hoga.\n\n游늷~7: Settings mein, \"Environment Variables\" ko click karo aur \"Path\" ko select karo.\n\n游늷~8: \"Path\" ko edit karne ke liye, \"Edit\" button ko click karo aur ek neeche wala empty field mein, aapko Java bin directory ko paste karna hoga. Java bin directory ko paste karne ke baad, \"OK\" button ko click karo.\n\n游늷~9: Isse, aapka computer ready hoga Java ke applications ko run karne ke liye.\n\n"
    },
    {
        "id": "03",
        "name": "Java Syntax",
        "message": "游린 Ek Java program shuru ho jaata hai ek class ke saath.\nclass ke andar, hum apne program ka main method define karte hain, jismein humein program ka entry point bataya jata hai.",
        "example": "class HelloJava {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Welcome to Codewati Tech Private Limited:)\");\n    }\n}",
        "remcont": "游린 Iska matlab yeh hai ki hum Java mein, objects aur functions ka use karte hain. \"System\" ek object hai jise hum use karte hain Java runtime ke liye. \"out\" ek variable hai jiska matlab yeh hai ki output stream. Aur \"println\" ek function hai jismein hum string ko print karwate hain aur ek endline character bhi add karte hain.\n\n"
    },
    {
        "id": "04",
        "name": "Comments",
        "message": "游린 Java mein, hum code ke liye comments bhi likh sakte hain. Comments code ko user ke liye explain karte hain aur code ko neat aur clean banate hain.\n\n游린 Hum Java mein, do types ke comments likh sakte hain:\n\n游늷~1. Single line comments:\nSingle line comments ek line mein comments ka kaam karte hain. Iske liye, hum // ka use karte hain.\n\n游늷~2. Multi-line comments:\nMulti-line comments mein, hum bahut saare lines comments kar sakte hain. Iske liye, hum /* aur */ ka use karte hain.",
        "example": "public class HelloWorld {\n    // This is a single line comment\n    public static void main(String[] args) {\n        /*\n         * This is a\n         * multi-line comment\n         */\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "05",
        "name": "Variables",
        "message": "游린 Java mein, hum data ko store karna chahte samay, hum variables ka use karte hain. Variable ek memory location hai jismein hum data ko store kar sakte hain.\n\n游린 Hum variables ke saath data ko access kar sakte hain aur change kar sakte hain. Har variable ek data type hoga jaise ki int, float, char, boolean, string, etc.\n\n",
        "example": "int age;\nage = 25;\nString name = \"John Doe\";",
        "remcont": "游린 In this example, we have defined two variables:\n\n游늷~1. 'age': Ek integer variable hai jismein hum age ka data store kar sakte hain.\n游늷~2. 'name': Ek string variable hai jismein hum name ka data store kar sakte hain.\n\n游린 Hum, variables ko initialize karte samay, hum unhe ek value assign karte hain. Is value, variables ke data type ke anuroop hota hai.\n\n游린 Hum, variables ko bahut saare modifiers se define kar sakte hain, jaise ki access modifiers, non-access modifiers, etc.\n\n"
    },
    {
        "id": "06",
        "name": "Final Variables",
        "message": "游린 Java mein, hum variables ko final keyword se constant banate hain. Final variables ke through, hum ek value ko ek baar assign kar sakte hain, aur phir usse bad value nahi set kar sakte. Isliye, final variables ke through, hum immutable objects bana sakte hain.\n",
        "example": "public final int MAX_COUNT = 100;",
        "remcont": "游린 Is example mein, humne ek final variable MAX_COUNT define kiya hai aur usmein humne value 100 assign kiya hai. Ab hum is variable ko bad value nahi set kar sakte."
    },
    {
        "id": "07",
        "name": "Data Types",
        "message": "游린 Java mein, hum data ko store karne ke liye variables ka use karte hain. Is variables mein, hum data ko ek data type ke roop mein store karte hain. Java mein, humein do types ke data types ke bare mein jaana hai:\n\n游늷 1.~Primitive Data Types: \n\n游늸~int: Ek 32-bit signed integer hai, jo -2^31 taiyari se 2^31-1 tak values store kar sakti hai.\n\n游늸~float: Ek 32-bit IEEE 754 single-precision floating-point number hai.\n\n游늸~double: Ek 64-bit IEEE 754 double-precision floating-point number hai.\n\n游늸~boolean: Ek boolean value hai, jo true ya false ho sakta hai.\n\n游늸~char: Ek Unicode character ko store karta hai.\n\n游늸~byte: Ek 8-bit signed integer hai, jo -128 taiyari se 127 tak values store kar sakta hai.\n\n游늸~short: Ek 16-bit signed integer hai, jo -32768 taiyari se 32767 tak values store kar sakta hai.\n\n游늸~long: Ek 64-bit signed integer hai, jo -263 taiyari se 263-1 tak values store kar sakta hai.\n\n游늷 2.~Reference Data Types: \n\n游늸~Classes: Hum objects ko create karta hai.\n\n游늸~Interfaces: Hum objects ke behavior ko define karta hai.\n\n游늸~Arrays: Hum homogeneous values ko ek jagah mein store karta hai.\n\n游늸~Strings: Hum characters ka sequence store karta hai.\n",
        "example": "// int variable\nint myAge = 25;\nSystem.out.println(\"Meri Age: \" + myAge);\n\n//float variable\nfloat pi = 3.14f;\nSystem.out.println(\"Pi ki value: \" + pi);\n\n//boolean variable\nboolean isHungry = true;\nSystem.out.println(\"Mujhe bhook lag rahi hai?: \" + isHungry);\n\n//String variable\nString myName = \"Abhivishrut Bishnoi\";\nSystem.out.println(\"Mera Naam: \" + myName);\n\n//char variable\nchar myLetter = 'A';\nSystem.out.println(\"Mera alphabet: \" + myLetter);",
        "remcont": "游늷~In Example int: humne ek int variable myAge banaya hai aur usmein humne value 25 assign kiya hai. Aur humne System.out.println() ka use karke hum myAge ki value ko console mein print karwai hai.\n\n游늷~In Example float: humne ek float variable pi banaya hai aur usmein humne value 3.14 assign kiya hai. Aur humne System.out.println() ka use karke hum pi ki value ko console mein print karwai hai.\n\n游늷~In Example boolean: humne ek boolean variable isHungry banaya hai aur usmein humne value true assign kiya hai. Aur humne System.out.println() ka use karke hum isHungry ki value ko console mein print karwai hai.\n\n游늷~In Example char: humne ek char variable myLetter banaya hai aur usmein humne value 'A' assign kiya hai. Aur humne System.out.println() ka use karke hum myLetter ki value ko console mein print karwai hai.\n\n"
    },
    {
        "id": "08",
        "name": "Operators",
        "message": "游린 Java mein operators ek very important part hai. Operators help to perform arithmetic, relational, logical, and other operations on variables and values.\n\n游린 Hum Java mein, do types ke operators ka use karte hain:\n游늷~1. Unary Operators: Ek operator hai jise sirf ek operand ke saath use kiya jata hai.\n游늷~2. Binary Operators: Ek operator hai jise do operands ke saath use kiya jata hai.\n\n游린 Java mein, humein do types ke unary operators ka use karne mein familiar ho jaana chahiye:\n\n游늷~1. Pre-Increment Operator: '++'\nYahan, humein pre-increment operator ka use karke, hum ek variable ko increase karwate hain. Iske liye, hum ++ operator ko variable ka aage rakhte hain.\n\n游늷~2. Pre-Decrement Operator: '--'\nYahan, humein pre-decrement operator ka use karke, hum ek variable ko decrease karwate hain. Iske liye, hum -- operator ko variable ka aage rakhte hain.",
        "example": "public class OperatorsDemo {\n    public static void main(String[] args) {\n        // Pre-Increment Operator\n        int a = 5;\n        System.out.println(\"Original value of a: \" + a);\n        ++a;\n        System.out.println(\"After pre-increment, a is now: \" + a);\n\n        // Pre-Decrement Operator\n        int b = 10;\n        System.out.println(\"Original value of b: \" + b);\n        --b;\n        System.out.println(\"After pre-decrement, b is now: \" + b);\n\n        // Addition Operator\n        int num1 = 5;\n        int num2 = 10;\n        int sum = num1 + num2;\n        System.out.println(\"Sum of \" + num1 + \" and \" + num2 + \" is: \" + sum);\n\n        // Subtraction Operator\n        int x = 15;\n        int y = 10;\n        int difference = x - y;\n        System.out.println(\"Difference of \" + x + \" and \" + y + \" is: \" + difference);\n\n        // Multiplication Operator\n        int p = 4;\n        int q = 5;\n        int product = p * q;\n        System.out.println(\"Product of \" + p + \" and \" + q + \" is: \" + product);\n\n        // Division Operator\n        int dividend = 20;\n        int divisor = 4;\n        int quotient = dividend / divisor;\n        System.out.println(\"Quotient of \" + dividend + \" divided by \" + divisor + \" is: \" + quotient);\n\n        // Modulus Operator\n        int dividendMod = 20;\n        int divisorMod = 3;\n        int remainder = dividendMod % divisorMod;\n        System.out.println(\"Remainder of \" + dividendMod + \" divided by \" + divisorMod + \" is: \" + remainder);\n\n        // Post-Increment Operator\n        int num = 5;\n        int incrementedNum = num++;\n        System.out.println(\"Original value of num: \" + num);\n        System.out.println(\"Value of incrementedNum: \" + incrementedNum);\n\n        // Post-Decrement Operator\n        int numDec = 10;\n        int decrementedNum = numDec--;\n        System.out.println(\"Original value of numDec: \" + numDec);\n        System.out.println(\"Value of decrementedNum: \" + decrementedNum);\n    }\n}",
        "remcont": "游린 Hum Java mein, bahut saare operators ka use kar sakte hain, jaise ki multiplication operator (*), division operator (/), modulus operator (%), etc.\n\n游린 Hum Java mein, bahut saare logical operators ka use kar sakte hain, jaise ki AND operator (&&), OR operator (||), NOT operator (!), etc.\n\n游린 Hum Java mein, bahut saare relational operators ka use kar sakte hain, jaise ki equal to operator (==), not equal to operator (!=), less than operator (<), etc.\n\n游린 Hum Java mein, assignment operators ka use bhi kar sakte hain, jaise ki =, +=, -=, *=, /=, %=, etc.\n\n游린 Iske alawa, hum Java mein, increment (++), decrement (--), bitwise (&, |, , ~, <<, >>, >>>), shift (<<<, >>>), conditional (? :), and ternary (?:) operators ka use bhi kar sakte hain.\n\n游린 Iske liye, operators ek very important part of Java programming hai. Operators help to perform arithmetic, relational, logical, and other operations on variables and values.\n\n"
    },
    {
        "id": "09",
        "name": "Type Casting",
        "message": "游린 Java mein Type Casting, ek critical concept hai jise data type ko doosre data type me convert karna allowed karta hai. Iske kaam aata hai jab hum doosre data types ke operations perform karna chahte hai ya agar aap ek value ko doosre data type ke variable me store karna chahte hai.\n\nHum do types ke Type Casting ka concept dekhenge:\n\n游늷~1. Widening Type Casting: Isme, Java automaticaly ek data type ko doosre data type me convert karta hai. Jab hum ek chhota size wala data type ko, bara size wala data type me assign karenge toh is Type Casting ka use hota hai. Yeh automatically hota hai, isliye iska koi specific keyword use nahi kiya jata.\n\n游늷~2. Narrowing Type Casting: Isme, hum manual cast karte hai ek data type ko doosre data type me. Jab hum ek bara size wala data type ko, chhota size wala data type me assign karenge toh is Type Casting ka use hota hai. Isme, hum (int) keyword ka use karte hai jise hum batate hai ki hum num variable ko int type me convert karna chahte hai.\n",
        "example": "// Widening Type Casting\npublic class WideningTypeCasting {\n    public static void main(String[] args) {\n        int num = 10;\n        System.out.println(\"The integer value: \" + num);\n\n        double data = num;\n        System.out.println(\"The double value: \" + data);\n    }\n}\n\n// Narrowing Type Casting\npublic class NarrowingTypeCasting {\n    public static void main(String[] args) {\n        double num = 10.99;\n        System.out.println(\"The double value: \" + num);\n\n        int data = (int)num;\n        System.out.println(\"The integer value: \" + data);\n    }\n}",
        "remcont": "游린~Note: Narrowing Type Casting me data loss ho sakta hai, isliye hum ise explicit karne ke liye khud parenthesis me daalte hai. Humne sirf 2 types ke Type Casting ka concept diya, lekin Java mein doosre bhi types ke Type Conversion hota hai jaise string to int, int to string, etc."
    },
    {
        "id": "10",
        "name": "String",
        "message": "游린 Java mein String, ek built-in data type hai jisme hum text ko store aur manipulate kar sakte hai. String ek object hai jisme hum text ko store karte hai.\n\n游늷~1. String ek immutable object hai: String ek immutable object hai, isliye hum text ko change nahi kar sakte. Jab hum text ko change karne ke liye koshish karte hai to ek nayi String object banana padta hai.\n\n游늷~2. String ek sequence hai: String ek sequence hai jisme hum characters ko store kar sakte hai. Isliye hum string ko index ka use karke access kar sakte hai.\n\n游늷~3. String ek object hai: String ek object hai jisme hum text ko store karte hai. Isliye hum String class ke methods ka use kar sakte hai.\n",
        "example": "// immutable object\npublic class ImmutableObjectExample {\n    public static void main(String[] args) {\n        String data = \"Hello, World!\";\n        data = data.replace(\"World\", \"Java\");\n        System.out.println(\"The modified string is: \" + data);\n    }\n}\n\n// sequence\npublic class SequenceExample {\n    public static void main(String[] args) {\n        String data = \"Hello, World!\";\n        System.out.println(\"The first character of the string is: \" + data.charAt(0));\n        System.out.println(\"The last character of the string is: \" + data.charAt(data.length() - 1));\n    }\n}\n\n// object\npublic class ObjectExample {\n    public static void main(String[] args) {\n        String data = \"Hello, World!\";\n        System.out.println(\"The length of the string is: \" + data.length());\n        System.out.println(\"The lower case of the string is: \" + data.toLowerCase());\n        System.out.println(\"The upper case of the string is: \" + data.toUpperCase());\n    }\n}",
        "remcont": "游늷~In Immutable Example: Is example me humne replace() method ka use kiya hai jisme kya \"World\" ko \"Java\" me replace kar sakte hai. Lekin yeh hume ek nayi String object bana sakta hai jo hum \"Hello, Java!\" ke roop me store kar sakte hai.\n\n游늷~In Squence Example: Is example me humne charAt() method ka use kiya hai jisme hum characters ko index ke roop me access kar sakte hai.\n\n游늷~In Object Example: Is example me humne length(), toLowerCase() aur toUpperCase() method ka use kiya hai jisme hum string ke length ko access kar sakte hai aur usko Hinglish me ya capital letters me change kar sakte hai.\n\n游린~Note: String ek built-in class hai jo Java ke standard library me hai. Isliye hum String class ke methods ko direct use kar sakte hai.\n\n"
    },
    {
        "id": "11",
        "name": "if else",
        "message": "游린 Java mein if-else, ek control flow statement hai jo humko decision making mein help karta hai. Hum if-else statement ka use karke, program ko ek condition provide kar sakte hai aur agar ye condition true hoti hai to program ek part chalta hai aur agar ye condition false hoti hai to program doosre part chalta hai.\n\n游늷~1. If statement: If statement ek condition check karta hai aur agar ye true hoti hai to program ek part chalta hai.\n\n游늷~2. If-else statement: If-else statement ek condition check karta hai aur agar ye condition true hoti hai to program ek part chalta hai aur agar ye condition false hoti hai to program doosre part chalta hai.\n\n游늷~3. If-else if ladder: If-else if ladder ek condition check karta hai aur agar ye condition true hoti hai to program ek part chalta hai aur agar ye condition false hoti hai to program doosre condition check karta hai. Isse hum multiple conditions check kar sakte hai.\n",
        "example": "class Main {\n public static void main(String[] args) {\n int number = 10;\n// if Condition\n if (number > 10) {\n System.out.println(\"The number is greater than 10\");\n } else if (number > 5) {      // else if Condition\n System.out.println(\"The number is greater than 5\");\n } else {      // else Condition\n System.out.println(\"The number is less than or equal to 5\");\n }\n }\n}",
        "remcont": "游린~Note: If-else statement ek very useful tool hai jisme hum decision making ka maddad kar sakte hai. Isse hum program ko ek condition ke anuroop modify kar sakte hai.\n\n"
    },
    {
        "id": "12",
        "name": "while Loop",
        "message": "游린 Java mein while loop, ek control flow statement hai jisme hum program ko ek condition ke anuroop chalane ke liye use kar sakte hai. Hum while loop ka use karke, hum program ko repeat karna aur kontinue karna chahte samay use kar sakte hai.\n\n~While loop: While loop ek condition check karta hai aur agar ye condition true hoti hai to program ek part chalta hai. Isse hum ek loop create kar sakte hai jisme hum program ko repeat kar sakte hai.\n",
        "example": "class Main {\n    public static void main(String[] args) {\n        int counter = 0;\n        while (counter < 10) {\n            System.out.println(\"The counter value is: \" + counter);\n            counter++;\n        }\n    }\n}",
        "remcont": "游린 Is example me humne counter < 10 condition check kara hai aur agar ye true hoti hai to program The counter value is: 0 ka output dikhayega aur counter ko 1 increment karta hai. Isse program The counter value is: 1 ka output dikhayega aur counter ko 2 increment karta hai aur is process ko repeat karte hai. Jab tak counter < 10 condition false nahi hoti hai, program ek bar ek bar repeat hoga."
    },
    {
        "id": "13",
        "name": "do while Loop",
        "message": "游린 Java mein do-while loop, ek control flow statement hai jisme hum program ko ek condition ke anuroop chalane ke liye use kar sakte hai. Hum do-while loop ka use karke, hum ek loop create kar sakte hai jisme hum program ko repeat karna chahte hai aur agar ye condition false hoti hai to program ek bar ek bar execute hoga.\n\n~Do-while loop: Do-while loop ek condition check karta hai aur agar ye condition true hoti hai to program ek part chalta hai. Isse hum ek loop create kar sakte hai jisme hum program ko repeat kar sakte hai aur agar ye condition false hoti hai to program ek bar ek bar execute hoga.\n",
        "example": "class Main {\n    public static void main(String[] args) {\n        int counter = 10;\n        do {\n            System.out.println(\"The counter value is: \" + counter);\n            counter++;\n        } while (counter < 10);\n    }\n}",
        "remcont": "游린 Is example me humne counter < 10 condition check kara hai aur agar ye false hoti hai to program The counter value is: 10 ka output dikhayega aur counter ko 1 increment karta hai. Isse program ek bar execute hoga aur counter ko 11 increment karta hai. Ab agar ye condition false hai to program ek bar ek bar execute hoga aur program end hoga.\n\n"
    },
    {
        "id": "14",
        "name": "for Loop",
        "message": "游린 Java mein for loop ek control flow statement hai jisme hum program ko ek condition ke anuroop chalane ke liye use kar sakte hai. For loop ek initialization, condition aur update expressions ke saath use kiya jata hai. Isme hum ek loop chalane ke liye ek variable ko initialize karenge aur hum us variable ki condition check karenge aur update karte hue us loop ko chalne denge.\n",
        "example": "// Syntax:\n/*\nfor (initialization; condition; increment/decrement) {\n    // Loop Body\n}\n*/\n\nclass ForDemo {\n    public static void main(String[] args){\n         for(int i=1; i<11; i++){\n              System.out.println(\"Count is: \" + i);\n         }\n    }\n}",
        "remcont": "游린 Is example me hum i=1 se initialize kiya hai aur hum i<11 condition check kiya hai aur i++ se update kiya hai. Isse hum Count is: 1 se Count is: 10 tak jab tak hum loop ko repeat karte hai jab tak ye condition true nahi hoti hai.\n\n"
    },
    {
        "id": "15",
        "name": "continue Statement",
        "message": "游린 Continue statement ek control flow statement hai jisme hum Java mein ek loop ko skip karne ke liye use kar sakte hai. Continue statement use karne se hum ek iteration ko skip kar sakte hai aur agle iteration ke liye program loop ki body me jata hai.\n\n游늷 Is loop me hum loop ki body me continue statement ka use karte hai jisme hum i variable ke 5 se 8 tak ki values ko skip karte hai aur agle iteration ke liye program loop ki body me jata hai.\n",
        "example": "class ContinueDemo {\n    public static void main(String[] args){\n         for(int i=1; i<11; i++){\n              if(i>=5 && i<=8){\n                   continue;\n              }\n              System.out.println(\"Count is: \" + i);\n         }\n    }\n}",
        "remcont": "游린 Is example me hum i variable ke 5 se 8 tak ki values ko skip karte hai aur agle iteration ke liye program loop ki body me jata hai. Isse hum Count is: 1 se Count is: 4 tak aur Count is: 9 se Count is: 10 tak jab tak hum loop ko repeat karte hai jab tak ye condition true nahi hoti hai.\n\n"
    },
    {
        "id": "16",
        "name": "break Statement",
        "message": "游린 Break statement ek control flow statement hai jisme hum Java mein ek loop ko end karne ke liye use kar sakte hai. Break statement use karne se hum ek iteration ko end kar sakte hai aur loop ko exit kar sakte hai.\n\n游늷 Is loop me hum loop ki body me break statement ka use karte hai jisme hum i variable ke 5 tak ki values ko print karte hai aur jab i variable 5 tak tak pahunche to hum break statement ka use karke hum loop ko end karte hai.\n",
        "example": "class BreakDemo {\n    public static void main(String[] args){\n         for(int i=1; i<11; i++){\n              if(i==5){\n                   break;\n              }\n              System.out.println(\"Count is: \" + i);\n         }\n    }\n}",
        "remcont": "游린 Is example me hum i variable ke 5 tak ki values ko print karte hai aur jab i variable 5 tak tak pahunche to hum break statement ka use karke hum loop ko end karte hai. Isse hum Count is: 1 se Count is: 4 tak jab tak hum loop ko repeat karte hai jab tak ye condition true nahi hoti hai.\n\n"
    },
    {
        "id": "17",
        "name": "switch Statement",
        "message": "游린 Switch statement ek control flow statement hai jisme hum Java mein ek expression ki value ko check karke, kai cases mein bhej sakte hai. Switch statement me hum ek expression ko check karte hai aur agar us expression ki value ek case ki value se match karti hai to hum us case ki body execute karte hai.\n",
        "example": "class SwitchDemo {\n    public static void main(String[] args){\n         int number = 3;\n         switch(number){\n              case 1:\n                   System.out.println(\"Number is 1\");\n                   break;\n              case 2:\n                   System.out.println(\"Number is 2\");\n                   break;\n              case 3:\n                   System.out.println(\"Number is 3\");\n                   break;\n              default:\n                   System.out.println(\"Number is not 1, 2 or 3\");\n         }\n    }\n}",
        "remcont": "游린 Is example me hum number variable ko switch statement me pass karte hai aur hum us variable ki value 3 hai. Isse hum case 3 ki body execute karte hai aur hum Number is 3 print karte hai.\n\n"
    },
    {
        "id": "18",
        "name": "Exception Handling",
        "message": "游린 Exception Handling ek Java mein bahut important concept hai. Isme hum kuch samasyayein solve kar sakte hai jo program chalane ke dauran ho sakte hain. Exception ek special type ke errors hai jo Java ke run-time me hota hai. Agar hum exception ko handle nahi karte to program exit ho jayega.\n\nException Handling me hum 'try', 'catch', 'finally', 'throw', 'throws' ke chand keywords ka use karte hai.\n\n游늷~1. Try Block: Is block me hum code ko write karte hai jisme exception ho sakta hai.\n\n游늷~2. Catch Block: Is block me hum exception ko handle karte hai.\n\n游늷~3. Finally Block: Is block me hum code ko write karte hai jisme exception ho ya na ho, is block ka code execute hona zaroori hai.\n\n游늷~4. Throw Keyword: Is keyword se hum apne own exception throw kar sakte hai.\n\n游늷~5. Throws Keyword: Is keyword se hum apne own method me exception declare kar sakte hai.\n",
        "example": "class ExceptionHandlingDemo {\n    static void divide(int a, int b) {\n        try {\n            if (b == 0) {\n                throw new ArithmeticException(\"Cannot divide by zero\");\n            }\n            System.out.println(a / b);\n        } catch (ArithmeticException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        divide(10, 0);\n    }\n}",
        "remcont": "游린 Is example me hum divide method me try block ka use karte hai aur hum b==0 condition check karte hai. Agar ye condition true hoti hai to hum throw keyword ka use karke ek exception generate karte hai. Isse hum catch block me ArithmeticException catch karte hai aur hum getMessage() method ka use karke exception ka message print karte hai.\n\n~Note: Hum ek try block me multiple catch blocks bhi define kar sakte hai. Agar hum ek exception ko multiple catch blocks me catch kar sakte hai to hum ExceptionType ko specific hone se bhi sakta hai.\n\n游린 Exception Handling ek very useful tool hai jisme hum program ko ek condition ke anuroop modify kar sakte hai. Isse hum program ko ek condition ke anuroop modify kar sakte hai aur hum program ko ek condition ke anuroop handle kar sakte hai.\n\n"
    },
    {
        "id": "19",
        "name": "try catch",
        "message": "游린 Try-catch ek exception handling mechanism hai jisme hum Java mein ek block me code chalayenge jisme exception ho sakta hai aur agar exception ho jaaye to hum us exception ko handle karne ke liye catch block ka use kar sakte hai.\n",
        "example": "class TryCatchExample {\n    public static void main(String[] args) {\n        try {\n            int a = 10;\n            int b = 0;\n            int c = a / b;\n            System.out.println(c);\n        } catch (ArithmeticException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}",
        "remcont": "游린 Is example me hum try block me a, b aur c variable declare karte hai aur hum a aur b variable ke value ko divide karte hai. Agar b variable ki value 0 hoti hai to hum ArithmeticException generate karte hai aur isse hum catch block me ArithmeticException catch karte hai aur hum getMessage() method ka use karke exception ka message print karte hai.\n\n~Note: Ek try block me multiple catch blocks bhi define kar sakte hai. Agar hum ek exception ko multiple catch blocks me catch kar sakte hai to hum ExceptionType ko specific hone se bhi sakta hai.\n\n游린 Try-catch ek very useful tool hai jisme hum program ko ek condition ke anuroop modify kar sakte hai. Isse hum program ko ek condition ke anuroop handle kar sakte hai aur hum program ko ek condition ke anuroop modify kar sakte hai.\n\n"
    },
    {
        "id": "20",
        "name": "Array",
        "message": "游린 Java mein array ek fixed-size collection hai jisme same type ke elements save kiye ja sakte hain. Yeh ek single variable hai jisme array ka size aur elements ke values define kiye jate hain. Array ke elements ka access karne ke liye indexing system ka use kiya jata hai jisme pehla element ka index '0' hota hai. Agar hum ek array banane ke liye koi specific size nahi define karenge to hum default me '0' size ka array banane ke liye hum 'new' keyword ka use kar sakte hain.\n\nArray ke saath hum kuch important operations kar sakte hain jaise:\n\n游늷~1. Declaration: 'datatype[] arrayName;'\n\n游늷~2. Initialization: 'arrayName = new datatype[arraySize];'\n\n游늷~3. Accessing elements: 'arrayName[index];'\n\n游늷~4. Modifying elements: 'arrayName[index] = value;'\n\n游늷~5. Finding length: 'arrayName.length;'\n\n游린 ~Note: Agar hum ek array ke pehle element ko access karne ke liye index -1 ka use karte hain to hum ArrayIndexOutOfBoundsException prapt karte hain.\n",
        "example": "class ArrayExample {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0] = 10;\n        numbers[1] = 20;\n        numbers[2] = 30;\n        numbers[3] = 40;\n        numbers[4] = 50;\n        System.out.println(\"Length of the array is: \" + numbers.length);\n        System.out.println(\"The first element is: \" + numbers[0]);\n        System.out.println(\"The second element is: \" + numbers[1]);\n        System.out.println(\"The third element is: \" + numbers[2]);\n        System.out.println(\"The fourth element is: \" + numbers[3]);\n        System.out.println(\"The fifth element is: \" + numbers[4]);\n    }\n}",
        "remcont": "游린 Is example me hum 'numbers' array ke 5 elements banaye hain aur hum unhe '10', '20', '30', '40', aur '50' se initialize kiye hain. Agar hum 'numbers.length' ka use karte hain to hum '5' prapt karte hain. Agar hum 'numbers[0]' ka use karte hain to hum '10' prapt karte hain aur agar hum 'numbers[4]' ka use karte hain to hum '50' prapt karte hain.\n\n游린 Array ek very useful tool hai jisme hum data ko fixed-size me store kar sakte hai aur usme access aur manipulate kar sakte hai. Isse hum data ko ek condition ke anuroop handle kar sakte hai aur hum program ko ek condition ke anuroop modify kar sakte hai.\n\n"
    },
    {
        "id": "21",
        "name": "Array Traversing",
        "message": "游린 Array traversing ek process hai jisme hum ek array ke elements ko iterate karte hai aur har element ko access karte hai. Iske liye hum array ke elements ko for loop ya while loop ke saath iterate kar sakte hai.\n",
        "example": "class ArrayTraversingExample {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0] = 10;\n        numbers[1] = 20;\n        numbers[2] = 30;\n        numbers[3] = 40;\n        numbers[4] = 50;\n        System.out.println(\"Array Traversing:\");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println(\"The element at index \" + i + \" is: \" + numbers[i]);\n        }\n    }\n}",
        "remcont": "游린 Is example me hum numbers array ke 5 elements banaye hai aur hum unhe '10', '20', '30', '40', aur '50' se initialize kiye hain. Agar hum 'numbers.length' ka use karte hain to hum 5 prapt karte hain. Agar hum 'numbers[i]' ka use karte hain to hum 'i' ke saath array ke elements ko iterate karte hain aur har iteration me hum ek element ko print karte hain.\n\n游린 ~Note: Array traversing ek very useful tool hai jisme hum data ko fixed-size me store kar sakte hai aur usme access aur manipulate kar sakte hai. Isse hum data ko ek condition ke anuroop handle kar sakte hai aur hum program ko ek condition ke anuroop modify kar sakte hai.\n\n"
    },
    {
        "id": "22",
        "name": "Multidimensional Array",
        "message": "游린 Multidimensional array ek array ke andar ek aur array hota hai jisme hum multiple dimensions me data store kar sakte hain. Iske liye hum arrayName[][] ya arrayName[rows][columns] ka use kar sakte hain. Isse hum multiple rows aur columns me elements store kar sakte hain.\n",
        "example": "class MultidimensionalArrayExample {\n    public static void main(String[] args) {\n        int[][] numbers = new int[3][3];\n        numbers[0][0] = 1;\n        numbers[0][1] = 2;\n        numbers[0][2] = 3;\n        numbers[1][0] = 4;\n        numbers[1][1] = 5;\n        numbers[1][2] = 6;\n        numbers[2][0] = 7;\n        numbers[2][1] = 8;\n        numbers[2][2] = 9;\n        System.out.println(\"Multidimensional Array:\");\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = 0; j < numbers[i].length; j++) {\n                System.out.print(numbers[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}",
        "remcont": "游린 Is example me hum numbers multidimensional array ke 3 rows aur 3 columns banaye hai aur hum unhe '1', '2', '3', '4', '5', '6', '7', '8', aur '9' se initialize kiye hain. Agar hum 'numbers.length' ka use karte hain to hum '3' prapt karte hain aur agar hum 'numbers[i].length' ka use karte hain to hum '3' prapt karte hain. Agar hum 'numbers[i][j]' ka use karte hain to hum 'i' aur 'j' ke saath array ke elements ko iterate karte hain aur har iteration me hum ek element ko print karte hain.\n\n游린~Note: Hum for loop ya while loop ke saath multidimensional array ko traverse kar sakte hain. Isse hum data ko ek condition ke anuroop handle kar sakte hai aur hum program ko ek condition ke anuroop modify kar sakte hain.\n\n"
    },
    {
        "id": "23",
        "name": "OOPs Concepts",
        "message": "游린 Java mein OOPs concepts, object-oriented programming ke concepts ka ek part hai. Yeh 4 concepts ke through chalte hain: Inheritance, Encapsulation, Abstraction, and Polymorphism.\n\n游늷~1. Inheritance: Inheritance ek process hai jisme hum ek class ke properties aur functions ko doosre class me inherit kar sakte hain. Isse hum code ko reuse kar sakte hain aur hum ek class ke properties aur functions ko doosre class me anaavashyakata se chhipa sakte hain.\n\n游늷~2. Encapsulation: Encapsulation ek process hai jisme hum data aur functions ko ek object me bind karte hain aur hum data ko private rakhte hain aur functions ko public rakhte hain. Isse hum data ko bahar se access nahi kar sakte aur hum data ko safe rakhte hain.\n\n游늷~3. Abstraction: Abstraction ek process hai jisme hum data aur functions ko abstract hone ke liye use kar sakte hain. Isse hum data aur functions ko bahar se access nahi kar sakte aur hum data ko safe rakhte hain.\n\n游늷~4. Polymorphism: Polymorphism ek process hai jisme hum ek class ke multiple forms me functions define kar sakte hain. Isse hum ek class ke functions ko doosre class me override kar sakte hain aur hum ek class ke functions ko multiple ways me use kar sakte hain.\n",
        "example": "0",
        "remcont": "游린~Note: OOPs concepts ek very important part hai Java programming mein aur yeh hume code ko organize aur maintain karne me madad karti hai.\n\n"
    },
    {
        "id": "24",
        "name": "Class And Object",
        "message": "游린 Java mein classes aur objects ek important part hai. Classes objects ke blueprint hain aur objects class se bana hote hain.\n\n游늷~1. Class: Class ek blueprint hai jisme hum object ke properties aur functions ko define karte hain. Classes objects ke blueprint hain aur hum objects ke properties aur functions ko define kar sakte hain.\n\n游늷~2. Object: Object class se bana hua class instance hai. Objects properties aur functions ko store karte hain.\n",
        "example": "class Animal {\n    void eat() {\n        System.out.println(\"Eating...\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"Barking...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat(); // here 'eat()' is an object\n        dog.bark(); // here 'bark()' is an object\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "25",
        "name": "Static Members",
        "message": "游린 In Java, static members ek class ke liye common hote hai. Isse hum ek class ke sabhi objects ke liye same values ko access kar sakte hain. Static members ke do types hoti hain: Variables aur Methods.\n\n游늷~1. Static Variables: Static variables ek class ke liye common hote hai. Isse hum ek class ke sabhi objects ke liye same values ko access kar sakte hain. Static variables ke liye memory sirf ek baar allocate hoti hai aur unhe class name ke saath directly access kar sakte hain.\n\n游늷~2. Static Methods: Static methods ek class ke liye common hote hain. Isse hum ek class ke sabhi objects ke liye same values ko access kar sakte hain. Static methods ke liye memory sirf ek baar allocate hoti hai aur unhe class name ke saath directly access kar sakte hain.\n\n~Note: Static members ko class ke liye common hone ke liye define kiya jata hai, isliye hum unhe class ke objects ke through nahi access kar sakte.\n",
        "example": "// Static Variables\n\nclass Counter {\n    static int count = 0;\n\n    Counter() {\n        count++;\n    }\n\n    static void display() {\n        System.out.println(\"Count: \" + count);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter c1 = new Counter();\n        Counter c2 = new Counter();\n        Counter.display(); // Output: Count: 2\n    }\n}// Static Methods\n\nclass MathUtils {\n    static int add(int a, int b) {\n        return a + b;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Sum: \" + MathUtils.add(5, 10)); // Output: Sum: 15\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "26",
        "name": "Non-Static Members",
        "message": "游린 In Java, non-static members ek object ke liye hote hai. Isse hum ek object ke liye unique values ko access aur set kar sakte hain. Non-static members ke do types hoti hain: Variables aur Methods.\n\n游늷~1. Non-Static Variables: Non-static variables ek object ke liye hote hai. Isse hum ek object ke liye unique values ko access aur set kar sakte hain. Non-static variables ke liye memory allocate hoti hai har object ke liye.\n\n游늷~2. Non-Static Methods: Non-static methods ek object ke liye hote hai. Isse hum ek object ke liye unique values ko access aur set kar sakte hain. Non-static methods ke liye memory allocate hoti hai har object ke liye.\n\n~Note: Non-static members ek object ke liye unique hone ke liye define kiye jate hai, isliye hum unhe class ke objects ke through access kar sakte hai.\n",
        "example": "// Non-Static Variables\nclass Student {\n    String name;\n    int rollNumber;\n\n    Student(String name, int rollNumber) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n    }\n\n    void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Roll Number: \" + rollNumber);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s1 = new Student(\"John Doe\", 1);\n        Student s2 = new Student(\"Jane Doe\", 2);\n\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n        s2.display(); // Output: Name: Jane Doe, Roll Number: 2\n    }\n}\n\n// Non-Static Methods\nclass Rectangle {\n    int length;\n    int breadth;\n\n    Rectangle(int length, int breadth) {\n        this.length = length;\n        this.breadth = breadth;\n    }\n\n    int area() {\n        return length * breadth;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Rectangle r1 = new Rectangle(5, 10);\n        Rectangle r2 = new Rectangle(10, 20);\n\n        System.out.println(\"Area of rectangle r1: \" + r1.area()); // Output: Area of rectangle r1: 50\n        System.out.println(\"Area of rectangle r2: \" + r2.area()); // Output: Area of rectangle r2: 200\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "27",
        "name": "Constructor",
        "message": "游린 In Java, constructor ek special type ke methods hai jo ek object banane ke liye use hoti hai. Isse hum ek object banane ke samay, ek object ke liye memory allocate kar sakte hai aur ek object ke liye properties set kar sakte hai.\n\nConstructor ke do types hote hain: Default aur Parameterized.\n\n游늷~1. Default Constructor: Default constructor ek constructor hai jisme koi parameter nahi hai. Iske liye compiler automatically ek default constructor generate karta hai. Default constructor ek class ke liye default values set karne ke liye use hoti hai.\n\n游늷~2. Parameterized Constructor: Parameterized constructor ek constructor hai jisme parameter dete hai. Isse hum ek object banane ke samay, ek object ke liye memory allocate kar sakte hai aur ek object ke liye properties set kar sakte hai.\n\n~Note: Constructor ka name same class ka naam hi hota hain.\n\n",
        "example": "// Default Constructor\nclass Student {\n    String name;\n    int rollNumber;\n\n    Student() {\n        name = \"John Doe\";\n        rollNumber = 1;\n    }\n\n    void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Roll Number: \" + rollNumber);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s1 = new Student();\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n    }\n}\n\n// Parameterized Constructor\n(String[] args) {\n        Student s1 = new Student(\"John Doe\", 1);\n        Student s2 = new Student(\"Jane Doe\", 2);\n\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n        s2.display(); // Output: Name: Jane Doe, Roll Number: 2\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "28",
        "name": "Access Modifiers",
        "message": "游린 Access modifiers in Java are keywords used to define the visibility of class members (variables, methods, and inner classes). These modifiers are public, private, and protected.\n\n游늷~1. Public: Public access modifier means that the variable or method can be accessed from anywhere.\n\n游늷~2. Private: Private access modifier means that the variable or method can only be accessed within the same class.\n\n游늷~3. Protected: Protected access modifier means that the variable or method can be accessed within the same package or within a subclass of the class in which the protected variable or method is declared.\n\n~Note: If no access modifier is specified, the default access modifier is package-private.\n\n",
        "example": "// 1. Public Access Modifier\nclass Student {\n    public String name;\n    public int rollNumber;\n\n    public Student(String name, int rollNumber) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n    }\n\n    public void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Roll Number: \" + rollNumber);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s1 = new Student(\"John Doe\", 1);\n        Student s2 = new Student(\"Jane Doe\", 2);\n\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n        s2.display(); // Output: Name: Jane Doe, Roll Number: 2\n    }\n}\n\n\n\n// 2. Private Access Modifier\nclass Student {\n    private String name;\n    private int rollNumber;\n\n    public Student(String name, int rollNumber) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n    }\n\n    public void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Roll Number: \" + rollNumber);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s1 = new Student(\"John Doe\", 1);\n        Student s2 = new Student(\"Jane Doe\", 2);\n\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n        s2.display(); // Output: Name: Jane Doe, Roll Number: 2\n    }\n}\n\n\n\n// 3. Protected Access Modifier\nclass Student {\n    protected String name;\n    protected int rollNumber;\n\n    public Student(String name, int rollNumber) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n    }\n\n    public void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Roll Number: \" + rollNumber);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s1 = new Student(\"John Doe\", 1);\n        Student s2 = new Student(\"Jane Doe\", 2);\n\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n        s2.display(); // Output: Name: Jane Doe, Roll Number: 2\n    }\n}\n\n\n\n// 4. Default Access Modifier (Package-Private)\nclass Student {\n    String name;\n    int rollNumber;\n\n    Student(String name, int rollNumber) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n    }\n\n    void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Roll Number: \" + rollNumber);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s1 = new Student(\"John Doe\", 1);\n        Student s2 = new Student(\"Jane Doe\", 2);\n\n        s1.display(); // Output: Name: John Doe, Roll Number: 1\n        s2.display(); // Output: Name: Jane Doe, Roll Number: 2\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "29",
        "name": "Encapsulation",
        "message": "游린 Encapsulation (ENCAPSULATION) ek very important concept hai Java mein, jisme data (variables) aur functions (methods) ek sath pack up kiya jaata hai within a single unit, which is called a class. Isse data ko bahar se access nahi karne dete, sirf methods se access ki ja sakti hai. Isse data ko safe rakhne ke liye use kiya jaata hai, jisse data tampering nahi ho sakta.\n\n游린 Encapsulation ko Java mein achieve karna mushkil nahi hai, bina kuch bhi special karne se bhi ho jata hai. Abhi main aapko ek basic example dikhata hoon:\n",
        "example": "public class Person {\n    private String name; // private variable\n\n    public String getName() { // public method to get the value of name\n        return name;\n    }\n\n    public void setName(String name) { // public method to set the value of name\n        this.name = name;\n    }\n}",
        "remcont": "游린 Is example mein, \"name\" variable private hai, isliye bahar se direct access nahi kiya ja sakta. Lekin, hum \"getName()\" aur \"setName()\" do methods banaaye hain, jisme \"getName()\" method se hum \"name\" variable ka value access kar sakte hain, aur \"setName()\" method se hum \"name\" variable ka value set kar sakte hain.\n\n游린 Encapsulation ka use aise areas mein bahut mahatvapurn hai jisme data bahut important hai, jaise bank account details, personal details, etc.\n\n"
    },
    {
        "id": "30",
        "name": "Packages",
        "message": "游린 Java mein packages ek tarah ke folder hai jisme related classes organize kiye ja sakte hain. Yeh code base ko bada banane se manage karne mein help karti hai by providing a namespace for classes.\n\n游린 Java mein packages define kiye jate hain \"package\" keyword ka use karke, source file ke start mein.\n\n游린 Jaise ki, agar aapne ek package \"com.codewati.pro-lang\" naam ke banaya hai, toh aap us package mein related classes daal sakte hain. Isse aap apne classes ko ek group mein rakh sakte hain, aur unhe aur programmer bhi dusre packages se alag kar sakte hain.\n\n游린 Packages ke saath, Java compiler automatically manages access control and prevents naming conflicts. Isliye, packages aise areas mein bahut useful hai jisme code base bada hota hai, jaise software companies, etc.\n\n",
        "example": "0",
        "remcont": "0"
    },
    {
        "id": "31",
        "name": "Inheritance",
        "message": "游린 Inheritance (INHERITANCE) in Java ek very important feature hai, jisme child class parent class ke properties aur methods inherit karta hai. Isse code reusability aur logical code organization ka fayda uthaya ja sakta hai.\n\n游린 Inheritance mein, parent class ko superclass aur child class ko subclass kehte hain. Superclass ke properties aur methods automatically available hote hain subclass mein, isse subclass ko unhe override karne ya extend karne mein time nahi lagega.\n",
        "example": "class Animal {\n    String name;\n\n    void eat() {\n        System.out.println(\"Eating...\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"Barking...\");\n    }\n}",
        "remcont": "游린 Is example mein, \"Animal\" class parent class hai aur \"Dog\" class child class hai. \"Dog\" class automatically \"name\" variable aur \"eat()\" method inherit karta hai \"Animal\" class se.\n\n游린 Inheritance ke saath, Java compiler automatically upar ki tarah manage karta hai method overriding aur variable hiding. Isliye, inheritance aise areas mein bahut useful hai jisme hierarchical relationship hota hai, jaise software development, etc.\n\n"
    },
    {
        "id": "32",
        "name": "Method Overloading",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "33",
        "name": "Method Overriding",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "34",
        "name": "super Keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "35",
        "name": "Polymorphism",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "36",
        "name": "Inner Class",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "37",
        "name": "Abstract Class",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "38",
        "name": "Interface",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "39",
        "name": "final Keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "40",
        "name": "Method Introduction",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "41",
        "name": "Parameterized Method",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "42",
        "name": "User input",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "43",
        "name": "Date and Time",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "44",
        "name": "ArrayList",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "45",
        "name": "LinkedList",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "46",
        "name": "HashMap",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "47",
        "name": "HashSet",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "48",
        "name": "Iterator",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "49",
        "name": "finally block",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "50",
        "name": "throw keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "51",
        "name": "File Handling",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "52",
        "name": "Create / Write File",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "53",
        "name": "Read File",
        "message": "",
        "example": "",
        "remcont": ""
    }
    
]

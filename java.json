[
    {
      "id": 1,
      "name": "What is C ?",
      "message": "📌 C ek general-purpose computer programming language hai, jo 1970s mein Dennis Ritchie ne banaya tha. Ye ek imperative procedural language hai, jise structured programming, lexical variable scope, aur recursion support karta hai, aur usme static type system hai. C ek compiler hota hai, jo low-level access provide karta hai memory ko, aur language constructs ko machine instructions ke saath efficient mapping karta hai, aur isme minimal runtime support chahiye.\n\n📌 C common use cases system programming ke liye hai, jahan operating systems, device drivers, aur protocol stacks banane ke liye istemaal kiya jata hai. Ye computer architectures ko range karta hai, jo largest supercomputers se smallest microcontrollers aur embedded systems tak pahunchke. Ye application software mein bhi use hua tha, lekin usme aajkal diminishing trend hai.\n\n📌 C language ne bahut se later languages ko influence kiya hai, jaise C++, C#, Objective-C, Java, JavaScript, Python, aur kai aur.\n\n📌 C mein ek simple 'Hello, World!' program ka as follows daalo:\n\n#include <stdio.h>\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n\n📌 Yeh program ka explanation:\n\n📍 1. #include <stdio.h>: Ye ek preprocessor directive hai aur isme standard input/output library ko include karta hai, jiska contains functions hai input aur output operations ke liye.\n\n📍 2. int main(): Ye program ka main part hai, jahan computer executable instructions ko start karta hai.\n\n📍 3. printf('Hello, World!\\n');: Ye line computer ko 'Hello, World!' text print karne ke liye kehti hai, aur yeh text ko ek naya line mein print karta hai.\n\n📍 4. return 0;: Ye line ko program successful execution ke asar se indicate karta hai.\n\n📌 Program ko run karne ke liye, aap usko .c file mein save karenge (jaise hello_world.c), phir ek C compiler ke through compile karenge aur fir execute karne ke liye compiled program ko chalayenge.\n\n"
    },
    {
        "id": 2,
        "name": "How To Install C",
        "message": "📌 C language ko install karne ke liye, aapko C compiler install karna hoga. Ek C compiler ko install karne ke liye, aap apne computer mein Linux, Windows, or Mac OS ko istemaal kar sakte hai.\n\n📍 1. C compiler (gcc) Linux mein pre-installed hota hai. Aap aapko sirf ek terminal window khola aur 'gcc' command type karna hoga, aur phir enter kar dena hoga. Agar system mein gcc compiler already installed hai, toh aap isse compile aur run kar sakte hai C programs.\n\n📍 2. Windows mein:\n\n📌 C language compiler Microsoft Visual Studio ke saath milta hai. Aap Visual Studio Community Edition ko free download kar sakte hai, aur fir Windows SDK ko install karke C language ko istemaal kar sakte hai.\n\n📍 3. Mac OS mein:\n\n📌 Mac OS mein, aap Xcode IDE ko istemaal kar C language compiler install kar sakte hai. Xcode free download karne ke liye App Store mein ja sakte hai, aur fir Xcode ko install kar sakte hai. Xcode mein C language compiler ke saath bundled hai.\n\n"
    },
    {
        "id":"3",
        "name":"Syntax in C programming",
        "message":"📌 C programming language ko 1972 mein Dennis Ritchie ne Bell Labs mein Vikas kiya tha, jabki unke saath Alan Snyder ne usme contribute kiya tha. C ek general-purpose, procedural programming language hai, jise imperative features bhi support karne ke liye design kiya gaya hai. C language ko C++, Objective-C, C#, Java, JavaScript, Python, Swift, Go, Perl, PHP, Rust, Unix, Linux, Windows, macOS, iOS, Android, Embedded Systems, and many other systems and applications mein use kiya jata hai.\n\n📌 C programming ka syntax hiper-text markup language (HTML) ke taur par 'markup' ke roop mein likha jata hai, jahan kuchh bhi code ya text ko 'mark' karne ke liye markup tags ka prayog kiya jata hai. Markup tags ek '<tag>' aur '</tag>' ke do part se consist karti hai, jahan 'tag' ek hawa mein use hota hai aur '</tag>' ek 'end tag' hota hai. C programming ka syntax 'C syntax' kehta hai aur isme C programming language mein instructions aur statements ke liye ek standard format hota hai.\n\n📌 C programming ki syntax ke kuchh basic principles hai:\n\n📍 1. Every statement in C programming must end with a semicolon (;).\n\n#include <stdio.h>\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n\n📍 2. Comments in C programming can be written in two ways:\n\n📍 a) Single line comment: //\n\n#include <stdio.h>\nint main() {\n   // This is a single-line comment\n   printf(\"Hello, World!\\n\"); \n   return 0;\n}\n\n📍 b) Multi-line comment: /* */\n\n#include <stdio.h>\nint main() {\n   /* This is a\n    * multi-line comment\n    */\n   printf(\"Hello, World!\\n\");\n   return 0;\n}\n\n"
    },
    {
        "id": 4,
        "name": "Variables in C",
        "message": "📌 C programming mein variables ek memory location hote hai jahan data ko store karna aur access karna adhikmatra hota hai. Variables ko define karne ke liye, aap unke type aur name define karte hai. C programming mein variables ke kuchh basic types hai:\n\n📍 1. int (integer): Integer variables ek whole number hote hai, jo -32768 se 32767 tak values store kar sakte hai.\n\nint age;\nage = 25;\n\n📍 2. float (floating-point number): Floating-point variables decimal values store karte hai.\n\nfloat price;\nprice = 4.99;\n\n📍 3. double (double-precision floating-point number): Double variables ek floating-point number hote hai, lekin unke accuracy aur range ek bar hi zyada hota hai.\n\ndouble pi;\npi = 3.141592653589793;\n\n📍 4. char (character): Character variables ek single character ko store karte hai.\n\nchar letter;\nletter = 'A';\n\n📍 5. void (no type): Void variables ek special type hai jise function ke return type ke roop mein use kiya jata hai.\n\nvoid function_name();\n\n📌 C programming mein variables ko define karne ke liye, aap unke type aur name define karte hai, aur agar aapko unki initial value bhi define karni hai, toh aap unhe assign kar sakte hai.\n\n#include <stdio.h>\nint main() {\n   int age = 25;\n   float price = 4.99;\n   double pi = 3.141592653589793;\n   char letter = 'A';\n\n   printf(\"age = %d\\n\", age);\n   printf(\"price = %f\\n\", price);\n   printf(\"pi = %lf\\n\", pi);\n   printf(\"letter = %c\\n\", letter);\n   return 0;\n}\n\n📌 C programming mein variables ko scope ke anuroop define kar sakte hai. Variables ke scope ek specific area hai jahan unki values access ki ja sakti hai. C programming mein variables ke do scope hai:\n\n📍 1: Global variables: Global variables ek program ke kisi bhi part mein access ki ja sakte hai.\n\n#include <stdio.h>\n// Global variable definition\nint global_var = 10;\n\nint main() {\n   // Global variable access\n   printf(\"global_var = %d\\n\", global_var);\n   return 0;\n}\n\n📍 2: Local variables: Local variables ek function ke andar define hote hai aur unhe sirf unke andar access ki ja sakti hai.\n\n#include <stdio.h>\nint main() {\n   // Local variable definition\n   int local_var = 20;\n\n   // Local variable access\n   printf(\"local_var = %d\\n\", local_var);\n   return 0;\n}\n\n📌 C programming mein variables ko scope ke anuroop define karne se, variables ke values function ke andar reuse ho jaati hai, aur program ke performance aur memory management mein fayda hota hai.\n\n"
    },
    {
        "id": 5,
        "name": "Constant Variables",
        "message": "📌 C programming mein constants ek unchangeable values hai jo program ke throughout execution mein same rahate hai. Constants ko define karne ke liye, aap unke type aur value define karte hai. C programming mein constants ke do types hai:\n\n📍 1: Integer constants: Integer constants whole numbers hote hai, jo -32768 se 32767 tak values store kar sakte hai.\n\n#include <stdio.h>\nint main() {\n   const int MAX_AGE = 100;\n\n   printf(\"MAX_AGE = %d\\n\", MAX_AGE);\n   return 0;\n}\n\n📍 2: Floating-point constants: Floating-point constants decimal values hote hai.\n\n#include <stdio.h>\nint main() {\n   const float PI = 3.141592653589793;\n\n   printf(\"PI = %f\\n\", PI);\n   return 0;\n}\n\n📌 C programming mein constants ko define karne ke liye, aap const keyword ka use karna zaroori hai. Constants ko define karne se, variables ke values unchangeable ban jaate hai, aur program ke memory management mein fayda hota hai.\n\n📌 C programming mein constants ko define karne ke do tarike hai:\n\n1. Define karne ke liye const keyword ka use karna:\n\n#include <stdio.h>\nint main() {\n   const int MAX_AGE = 100;\n   const float PI = 3.141592653589793;\n\n   printf(\"MAX_AGE = %d\\n\", MAX_AGE);\n   printf(\"PI = %f\\n\", PI);\n   return 0;\n}\n\n\n2. #define preprocessor directive ka use karna:\n\n#include <stdio.h>\n#define MAX_AGE 100\n#define PI 3.141592653589793\n\nint main() {\n\n   printf(\"MAX_AGE = %d\\n\", MAX_AGE);\n   printf(\"PI = %f\\n\", PI);\n   return 0;\n}\n\n📌 C programming mein constants ko const keyword ya #define preprocessor directive ka use karke define kar sakte hai, lekin #define directive constants ke values ko compile-time mein replace karta hai, aur const keyword constants ko memory mein store karta hai. Isliye const keyword constants ko prefer karna chahiye, kyunki isse compile-time aur run-time errors avoid hote hai.\n\n📌 C programming mein constants ko scope ke anuroop define kar sakte hai. Constants ko local ya global define kar sakte hain. Constants ko local define karne ke liye, aap unhe function ke andar define karte hai. Constants ko global define karne ke liye, aap unhe program ke bahar define karte hai. Constants ko global define karne se, unhe program ke throughout execution mein access ki ja sakti hai.\n\n📌 C programming mein constants ko scope ke anuroop define karke, constants ko function ke andar reuse ho jaati hai, aur program ke performance aur memory management mein fayda hota hai.\n\n"
    },
    {
        "id": 6,
        "name": "C Input Output",
        "message": "📌 C programming mein input-output operations standard input-output (stdio) library ke through perform ki jaati hai. C programming mein standard input-output ka use karne ke liye, aap #include <stdio.h> directive ka use karte hai.\n\n📌 C programming mein input-output operations:\n\n📍 1: printf() function: printf() function standard output ke through string, integer, float, etc. values print karta hai. printf() function format string ka use karte hai, jise format specifiers se define kiya jaata hai.\n\n#include <stdio.h>\nint main() {\n   int age = 25;\n   float price = 4.99;\n\n   printf(\"My age is %d and price is %.2f\\n\", age, price);\n   return 0;\n}\n\n📍 2: scanf() function: scanf() function standard input ke through string, integer, float, etc. values ko input karne ke liye use kiya jata hai. scanf() function format specifiers se string, integer, float values ko input karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int age;\n   float price;\n\n   printf(\"Enter your age and price: \");\n   scanf(\"%d %f\", &age, &price);\n\n   printf(\"Your age is %d and price is %.2f\\n\", age, price);\n   return 0;\n}\n\n📌 C programming mein input-output operations ke saath, aap formatted input-output perform kar sakte hai. Isse, program ke output ko user ke liye easily readable banaya ja sakta hai.\n\n📌 C programming mein input-output operations ke saath, aap files ke through input-output bhi perform kar sakte hai. Iske liye, aap fopen() function ka use karte hai jise file ko open karne ke liye, aur uske andar fprintf() aur fscanf() function ka use karte hai jise file ke through input-output karne ke liye.\n\n#include <stdio.h>\nint main() {\n   FILE *file;\n   int age;\n   float price;\n\n   file = fopen(\"file.txt\", \"w\");\n   fprintf(file, \"Enter your age and price: \");\n   fscanf(file, \"%d %f\", &age, &price);\n   fprintf(file, \"Your age is %d and price is %.2f\\n\", age, price);\n   fclose(file);\n   return 0;\n}\n\n📌 C programming mein input-output operations ke saath, aap complex input-output operations perform kar sakte hai. Isse, program ke input-output ko user ke liye easily readable aur manageable banaya ja sakta hai.\n\n"
    },
    {
        "id": 7,
        "name": "C Data Types",
        "message": "📌 C programming mein data types variables ke liye specific values ko define karte hai. C programming mein do types ke data types hai:\n\n📍 1: Primary data types: Primary data types ek basic data type hote hai jise variables define karne ke liye use kiye jate hai. Primary data types ke kuchh basic examples hai:\n\n📍 a) int (integer): Integer variables ek whole number hote hai, jo -32768 se 32767 tak values store kar sakte hai.\n\nint age;\nage = 25;\n\n📍 b) float (floating-point number): Floating-point variables decimal values store karte hai.\n\nfloat price;\nprice = 4.99;\n\n📍 c) double (double-precision floating-point number): Double variables ek floating-point number hote hai, lekin unke accuracy aur range ek bar hi zyada hota hai.\n\ndouble pi;\npi = 3.141592653589793;\n\n📍 d) char (character): Character variables ek single character ko store karte hai.\n\nchar letter;\nletter = 'A';\n\n📍 2: Derived data types: Derived data types primary data types se derive ho jaate hai. Derived data types ke kuchh basic examples hai:\n\n📍 a) array: Array ek collection hai ek data type ke values ko store karne ke liye.\n\nint arr[5];\narr[0] = 1;\narr[1] = 2;\narr[2] = 3;\narr[3] = 4;\narr[4] = 5;\n\n📍 b) pointer: Pointer ek variable hai jiska value ek memory location ka address hai.\n\nint num = 10;\nint *ptr;\nptr = &num;\n\n📍 c) structure: Structure ek collection hai different data types ke values ko store karne ke liye.\n\nstruct Student {\n   int age;\n   float price;\n   char letter;\n};\n\nstruct Student student;\nstudent.age = 25;\nstudent.price = 4.99;\nstudent.letter = 'A';\n\n📌 C programming mein data types ko variable ke saath define karte hai, aur unke values assign karte hai. C programming mein data types ko define karke, variables ke values memory mein specific locations mein store ho jaate hai. Isse, memory management aur memory utilization mein fayda hota hai.\n\n📌 C programming mein data types ko scope ke anuroop define kar sakte hai. Data types ko define karne ke do tarike hai:\n\n📍 1: Define karne ke liye typedef keyword ka use karna:\n\n#include <stdio.h>\ntypedef int integer;\n\nint main() {\n   integer num = 10;\n\n   printf(\"num = %d\\n\", num);\n   return 0;\n}\n\n📍 2: #define preprocessor directive ka use karna:\n\n#include <stdio.h>\n#define integer int\n\nint main() {\n   integer num = 10;\n\n   printf(\"num = %d\\n\", num);\n   return 0;\n}\n\n📌 C programming mein data types ko typedef keyword ya #define preprocessor directive ka use karke define kar sakte hai, lekin typedef keyword variables ke values ko readable banata hai, aur #define directive variables ke values ko replace karta hai. Isliye typedef keyword ko prefer karna chahiye.\n\n📌 C programming mein data types ko scope ke anuroop define karke, memory ko efficiently manage kiya ja sakta hai aur program ke performance mein fayda hota hai.\n\n"
    },
    {
        "id": 8,
        "name": "C Operators",
        "message": "📌 C programming mein operators ek symbol hai jise variables ya values ke through operations perform karne ke liye use kiye jate hai. C programming mein operators ke kuchh basic types hai:\n\n📍 1: Arithmetic operators: Arithmetic operators ek variable ya values ke through arithmetic operations perform karne ke liye use kiye jate hai. Arithmetic operators ke kuchh basic examples hai:\n\n📍 a) Addition (+): Addition ek variable ya values ko add karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = a + b;\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n\n📍 b) Subtraction (-): Subtraction ek variable ya values ko subtract karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = a - b;\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 c) Multiplication (*): Multiplication ek variable ya values ko multiply karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = a * b;\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 d) Division (/): Division ek variable ya values ko divide karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = a / b;\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 e) Modulus (%): Modulus ek variable ya values ko modulus karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = a % b;\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 2: Relational operators: Relational operators ek variable ya values ke through comparison operations perform karne ke liye use kiye jate hai. Relational operators ke kuchh basic examples hai:\n\n📍 a) Equal to (==): Equal to ek variable ya values ko compare karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = (a == b);\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 b) Not equal to (!=): Not equal to ek variable ya values ko compare karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = (a != b);\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 c) Greater than (>): Greater than ek variable ya values ko compare karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = (a > b);\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n📍 d) Less than (<): Less than ek variable ya values ko compare karne ke liye use kiya jata hai.\n\n#include <stdio.h>\nint main() {\n   int a = 5, b = 10, c;\n\n   c = (a < b);\n\n   printf(\"c = %d\\n\", c);\n   return 0;\n}\n\n"
    },
    {
        "id": 9,
        "name": "String in C",
        "message": "📌 C programming mein strings ek array of characters hote hai. C programming mein strings ko define karne ke liye, aap char data type ka array define karte hai.\n\n📌 C programming mein strings ko print karne ke liye, printf() function ka use kiya jata hai. printf() function %s format specifier ka use karke strings ko print kar sakta hai.\n\n#include <stdio.h>\nint main() {\n   char str[10] = \"Hello\";\n\n   printf(\"str = %s\\n\", str);\n   return 0;\n}\n\n📌 C programming mein strings ko manipulate karne ke liye, aap string.h library ka use kar sakte hai. string.h library ek collection hai functions jo strings ko manipulate karne ke liye use kiye jate hai.\n\nstring.h library ke through functions:\n\n📍 1: strlen() function: strlen() function ek string ka length print karta hai.\n\n#include <stdio.h>\n#include <string.h>\nint main() {\n   char str[10] = \"Hello\";\n\n   printf(\"strlen(str) = %d\\n\", strlen(str));\n   return 0;\n}\n\n📍 2: strcpy() function: strcpy() function ek source string ko destination string mein copy karta hai.\n\n#include <stdio.h>\n#include <string.h>\nint main() {\n   char src[10] = \"Hello\";\n   char dest[10];\n\n   strcpy(dest, src);\n\n   printf(\"src = %s, dest = %s\\n\", src, dest);\n   return 0;\n}\n\n📍 3: strcat() function: strcat() function ek source string ko destination string ke end mein concatenate karta hai.\n\n#include <stdio.h>\n#include <string.h>\nint main() {\n   char str1[10] = \"Hello\";\n   char str2[10] = \"World\";\n   char str3[20];\n\n   strcpy(str3, str1);\n   strcat(str3, str2);\n\n   printf(\"str3 = %s\\n\", str3);\n   return 0;\n}\n\n📍 4: strcmp() function: strcmp() function ek source string aur destination string ko compare karta hai.\n\n#include <stdio.h>\n#include <string.h>\nint main() {\n   char str1[10] = \"Hello\";\n   char str2[10] = \"World\";\n\n   int c = strcmp(str1, str2);\n\n   printf(\"strcmp(str1, str2) = %d\\n\", c);\n   return 0;\n}\n\n📌 C programming mein strings ko define aur manipulate karne se, user ke liye easily readable aur manageable output print kiya ja sakta hai.\n\n📌 C programming mein strings ko dynamic memory allocation ke through bhi define aur manipulate kar sakte hai. Isse, memory ko efficiently manage kiya ja sakta hai aur program ke performance mein fayda hota hai.\n\n📌 C programming mein strings ko define aur manipulate karne ke liye, aap typedef keyword ya #define preprocessor directive ka use kar sakte hai. Isse, strings ko readable aur manageable banaya ja sakta hai.\n\n📌 C programming mein strings ko scope ke anuroop define karke, memory ko efficiently manage kiya ja sakta hai aur program ke performance mein fayda hota hai.\n\n"
    },
    {
        "id": 10,
        "name": "if else in C",
        "message": "📌 C programming mein, if else statements ko conditionally execute karne ke liye use kiye hain. if else statement mein, program ek condition check karte hai. Agar condition sahi hai, to program us condition ke andar code execute karta hai. Agar condition galat hai, to program us condition ke baad ke code execute karta hai.\n\n📌 if else statement ke syntax hai:\n\nif (condition) {\n   // code to be executed if the condition is true\n} else {\n   // code to be executed if the condition is false\n}\n\n iske baad, aap else if statement ke saath multiple conditions check kar sakte hain. else if statement mein, program ek condition check karte hai. Agar condition sahi hai, to program us condition ke andar code execute karta hai. Agar condition galat hai, to program us condition ke baad ke code execute karta hai.\n\n📌 else if statement ke syntax hai:\n\nif (condition1) {\n   // code to be executed if condition1 is true\n} else if (condition2) {\n   // code to be executed if the condition1 is false and condition2 is true\n} else {\n   // code to be executed if the condition1 and condition2 are false\n}\n\n📌 C programming mein, if else statements ko nested bhi kar sakte hain. Iske baad, program ek nested condition check kar sakte hai. Agar nested condition sahi hai, to program us condition ke andar code execute karta hai. Agar nested condition galat hai, to program us condition ke baad ke code execute karta hai.\n\n📌 if else statements ko nested bhi define karne se, user ke liye easily readable aur manageable code generate kiya ja sakta hai.\n\n📌 C programming mein, if else statements ko conditionally execute karne ke liye, aap switch case statement ka use kar sakte hai. switch case statement mein, program ek variable ko check karte hai. Agar variable us variable ke value mein hai, to program us case ke andar code execute karta hai.\n\n📌 switch case statement ke syntax hai:\n\nswitch (variable) {\n   case value📍 1:\n      // code to be executed if variable == value1\n      break;\n   case value📍 2:\n      // code to be executed if variable == value2\n      break;\n   default:\n      // code to be executed if variable doesn't match any case\n}\n\n"
    },
    {
        "id": 11,
        "name": "while Loop in C",
        "message": "📌 C programming mein, 'while' loop ka use ye hai ki koi statements repeat karein, jab tak koi condition satisfied nahi hoti. Jaise ki,\n\n#include <stdio.h>\nint main() {\n    int counter = 0;\n    while (counter < 5) {\n        printf(\"Counter: %d\\n\", counter);\n        counter++;\n    }\n    return 0;\n}\n\n📌 Is example mein, hum 'counter' ko 0 se shuru karte hai, aur 'while' loop ke andar, hum 'Counter: %d\n' is statement ko print karte hai aur phir 'counter' ko 1 badha dete hai. Yeh loop chalega, jab tak 'counter' 5 se chhota rehta hai. Is se, yeh output dega:\n\n1: Counter: 0\n2: Counter: 1\n3: Counter: 2\n4: Counter: 3\n5: Counter: 4\n\n📌 Is example mein, 'counter' ke saath initialization aur update dono explicitly kiye gaye hai, kyunki 'while' loop mein, initialization aur update ke liye syntax nahi hai.\n\n"
    },
    {
        "id": 12,
        "name": "do while Loop in C",
        "message": "📌 C programming mein, 'do-while' loop ka use ye hai ki koi statements repeat karein, jab tak koi condition satisfied nahi hoti, lekin 'do-while' loop mein, statements to execute at least once, even if the condition is not satisfied at the first instance. Jaise ki,\n\n#include <stdio.h>\nint main() {\n    int counter = 0;\n    do {\n        printf(\"Counter: %d\\n\", counter);\n        counter++;\n    } while (counter < 5);\n    return 0;\n}\n\n📌 Is example mein, hum 'counter' ko 0 se shuru karte hai, aur 'do-while' loop ke andar, hum 'Counter: %d\n' is statement ko print karte hai aur phir 'counter' ko 1 badha dete hai. Is loop mein, statements to execute at least once, even if the condition is not satisfied at the first instance. Yeh loop chalega, jab tak 'counter' 5 se chhota rehta hai. Is se, yeh output dega:\n\n1: Counter: 0\n2: Counter: 1\n3: Counter: 2\n4: Counter: 3\n5: Counter: 4\n\n📌 Is example mein, 'counter' ke saath initialization aur update dono explicitly kiye gaye hai, kyunki 'do-while' loop mein, initialization aur update ke liye syntax nahi hai.\n\n"
    },
    {
        "id": 13,
        "name": "for Loop",
        "message": "📌 C programming mein, 'for' loop ka use ye hai ki koi statements repeat karein, jab tak koi condition satisfied nahi hoti. 'for' loop mein, initialization, condition, and update ke liye syntax hota hai, aur isme sirf ek line mein, sabhi ko likhaya jata hai. Jaise ki,\n\n#include <stdio.h>\nint main() {\n    for (int counter = 0; counter < 5; counter++) {\n        printf(\"Counter: %d\\n\", counter);\n    }\n    return 0;\n}\n\n📌 Is example mein, hum 'counter' ko 0 se shuru karte hai, aur 'for' loop ke andar, hum 'Counter: %d\n' is statement ko print karte hai aur phir 'counter' ko 1 badha dete hai. Is loop mein, initialization, condition, and update ke liye syntax hota hai, aur isme sirf ek line mein, sabhi ko likhaya jata hai. Yeh loop chalega, jab tak 'counter' 5 se chhota rehta hai. Is se, yeh output dega:\n\n1: Counter: 0\n2: Counter: 1\n3: Counter: 2\n4: Counter: 3\n5: Counter: 4\n\n"
    },
    {
        "id": 14,
        "name": "Continue statement",
        "message": "📌 C programming me, 'continue' statement loops ke andar use hota hai. Is statement ke baad ke code lines ko execute nahi karna chahte samay is statement ka use kiya jata hai. Continue statement ke baad ke code lines ko execute nahi karne ke liye, loop ke next iteration ko execute karke jate hain.\n\n📌 Is statement, for loop, while loop aur do-while loop ke andar use hote hain. Is statement ke baad ke code lines ko execute nahi karne ke liye, use hote hain. Continue statement ke baad ke code lines ko execute nahi karne ke liye, loop ke next iteration ko execute karke jate hain.\n\n📌 Aapko yeh code example dekhna cahiye:\n\nfor (int i = 0; i < 10; i++) {\n    if (i % 2 == 1) {\n        continue;\n    }\n    printf(\"%d\\n\", i);\n}\n\n📌 Is example me, loop ke har iteration ke liye chalega. Agar loop ke current iteration ke value of 'i' odd hai, to 'continue' statement execute hoga aur us iteration ko skip karke next iteration ko execute karne ke liye jayega. Agar loop ke current iteration ke value of 'i' even hai, to us iteration ko execute karke code lines ko print karne ke liye jayega.\n\nExample ka, output hoga:\n\na) 0\nb) 2\nc) 4\nd) 6\ne) 8\n\n📌 Aap bhi 'continue' statement use karke while loop aur do-while loop ke andar use kar sakte hain.\n\n📌 It is important to note that the 'continue' statement use se code ko aneke baar saaf dikhaya nahi jata hai aur samajhne me mushkil ho sakta hai.\n\n"
    },
    {
        "id": 15,
        "name": "break statement",
        "message": "📌 C programming me, 'break' statement loops ke andar use hota hai. Is statement ka use karke hum loop ko stop kar sakte hain. Jab bhi 'break' statement execute hota hai, to loop loop ka next iteration nahi chalega, isse loop stop hoga.\n\n📌 Is statement, for loop, while loop aur do-while loop ke andar use hote hain. Is statement ka use karke hum loop ko stop kar sakte hain. Jab bhi 'break' statement execute hota hai, to loop loop ka next iteration nahi chalega, isse loop stop hoga.\n\nexample:\n\nfor (int i = 0; i < 10; i++) {\n    if (i == 5) {\n        break;\n    }\n    printf(\"%d\\n\", i);\n}\n\n📌 Is example me, loop ke har iteration ke liye chalega. Agar loop ke current iteration ke value of 'i' 5 hai, to 'break' statement execute hoga aur loop stop hoga.\n\noutput of the code hoga:\n\na) 0\nb) 2\nc) 4\nd) 6\ne) 8\n\n📌 Aap bhi 'break' statement use karke while loop aur do-while loop ke andar use kar sakte hain.\n\n📌 It is important to note that the 'break' statement use se code ko aneke baar saaf dikhaya nahi jata hai aur samajhne me mushkil ho sakta hai. Isliye, 'break' statement ko sirf kharab cases ko handle karne ke liye use kiya jata hai.\n\n📌 It is also important to note that, 'break' statement ke use se, loop ke andar ke statements ko execute karna bandh karne ke liye, loop ke ek kharab case ko handle karne ke liye, aur loop ko early exit karne ke liye use kiya jata hai.\n\n"
    },
    {
        "id": 16,
        "name": "switch statement",
        "message": "📌 C programming me, 'switch' statement, control flow ke liye use hota hai. Is statement ke use se, aap ek variable ko check kar sakte hain aur unhe kai kai cases ke anuroop execute kar sakte hain.\n\n📌 Is statement me, hum ek variable ko define karte hain aur us variable ke value ko check karte hain. Phir hum use kai cases ke anuroop execute kar sakte hain. Agar koi case match nahi karta, then 'default' case execute hoga.\n\nexample:\n\nint day = 3;\n\nswitch (day) {\n    case 1:\n        printf(\"Today is Monday\\n\");\n        break;\n    case 2:\n        printf(\"Today is Tuesday\\n\");\n        break;\n    case 3:\n        printf(\"Today is Wednesday\\n\");\n        break;\n    case 4:\n        printf(\"Today is Thursday\\n\");\n        break;\n    default:\n        printf(\"I don't know what day it is\\n\");\n}\n\n📌 Is example me, hum ek variable 'day' define karte hain aur us variable ke value ko check karte hain. Agar 'day' ke value 1 hai to 'Today is Monday' print hoga. Agar 'day' ke value 2 hai to 'Today is Tuesday' print hoga. Aur agar 'day' ke value 3 hai to 'Today is Wednesday' print hoga. Agar koi bhi ek case match nahi karta, then 'default' case execute hoga aur 'I don't know what day it is' print hoga.\n\n📌 It is important to note that, 'switch' statement ke end me, 'break' statement ka use kiya jata hai. Is statement ke use se, loop ko stop karne ke liye, loop ke ek kharab case ko handle karne ke liye, aur loop ko early exit karne ke liye use kiya jata hai.\n\n📌 It is also important to note that, 'switch' statement ke use se, hum variable ko kai kai cases ke anuroop execute kar sakte hain. Isse, code ka readability aur maintainability badhta hai.\n\n"
    },
    {
        "id": 17,
        "name": "goto Statement",
        "message": "📌 C programming me, 'goto' statement, control flow ke liye use hota hai. Is statement ka use se, hum ek label ke through, koi bhi part of the code ko direct access kar sakte hain.\n\n📌 Is statement me, hum ek label define karte hain aur us label ko 'goto' statement ke through direct access kar sakte hain.\n\nExample:\n\nint i = 0;\nstart:\ni++;\nif (i < 10) {\n    goto start;\n}\nprintf(\"i is now 10\\n\");\n\n📌 Is example me, hum ek label 'start' define karte hain aur 'goto' statement ke through, hum 'start' label ko direct access karte hain. Isse, hum 'i' ko 1 se 10 tak increment karte rehte hain.\n\n📌 It is important to note that, 'goto' statement ke use se, code ka readability aur maintainability kam hota hai. Isliye, 'goto' statement ko sirf kharab cases ko handle karne ke liye use kiya jata hai.\n\n📌 It is also important to note that, 'goto' statement ke use se, hum koi bhi part of the code ko direct access kar sakte hain. Isse, code ka complexity badhta hai aur debugging me bahut mushkil ho sakta hai. Isliye, 'goto' statement ko aise cases me sirf use kiya jata hai jahan koi doosra solution nahi hai.\n\n📌 It is recommended to use 'goto' statement sparingly and only when it is necessary."
    },
    {
        "id": 18,
        "name": "Array in C",
        "message": "📌 C programming me, 'Array' ek fixed size ke variable ke group hai. Isme, hum ek variable ke group ko define karte hain aur unhe ek unique index se access kar sakte hain.\n\n📌 Array ke declaration me, hum unke size aur data type batate hain. Iske baad hum unhe define karte hain aur unhe ek unique index se access karte hain.\n\nExample:\n\nint arr[5];\n\narr[0] = 1;\narr[1] = 2;\narr[2] = 3;\narr[3] = 4;\narr[4] = 5;\n\nprintf(\"arr[2] = %d\\n\", arr[2]);\n\n📌 Is example me, hum ek Array 'arr' define karte hain aur unhe 5 integers ko assign karte hain. Phir hum unhe ek unique index se access karte hain. Is example ke baad, output of the code hoga:\n\narr[2] = 3\n\n📌 It is important to note that, Array ke size fixed hota hai. Isliye, hum unhe dynamically extend nahi kar sakte hain. Agar hum unke size ko change karna hai to hum ek naya Array define karte hain aur unhe copy karke usme shift kar denge.\n\n📌 It is also important to note that, Array ke index samajhne me, zero-based indexing ka use kiya jata hai. Isliye, hum array ke first element ko 0 se access karte hain aur last element ko (size-1) se access karte hain.\n\n📌 It is recommended to use Array, jab hum fixed size ke elements ko store karna chahte hain aur unke index ko access karne ki jarurat hai.\n\n"
    },
    {
        "id": 19,
        "name": "Array Traversing",
        "message": "📌 C programming me, 'Array Traversing' ek process hai, jisme hum ek Array ke elements ko ek ek access karte hain aur unhe ek ek parhne ke liye use kar sakte hain.\n\n📌 Is process me, hum ek loop ka use karte hain aur unhe ek ek index ko increment karte hain. Phir hum unhe ek ek element ko access karte hain aur unhe ek ek parhne ke liye use karte hain.\n\nExample:\n\nint arr[5] = {1, 2, 3, 4, 5};\n\nfor (int i = 0; i < 5; i++) {\n    printf(\"arr[%d] = %d\\n\", i, arr[i]);\n}\n\n📌 Is example me, hum ek Array 'arr' define karte hain aur usme 5 integers ko assign karte hain. Phir hum unhe ek ek parhne ke liye traverse karte hain. Is example ke baad, output of the code hoga:\n\narr[0] = 1\narr[1] = 2\narr[2] = 3\narr[3] = 4\narr[4] = 5\n\n📌 It is important to note that, Array ke index samajhne me, zero-based indexing ka use kiya jata hai. Isliye, hum array ke first element ko 0 se access karte hain aur last element ko (size-1) se access karte hain.\n\n📌 It is also important to note that, hum ek loop ka use karte hain jisme hum ek ek index ko increment karte hain. Isse, hum ek ek element ko access karte hain aur unhe ek ek parhne ke liye use karte hain.\n\n📌 It is recommended to use Array Traversing, jab hum ek Array ke elements ko ek ek parhne ke liye use chahte hain.\n\n"
    },
    {
        "id": 20,
        "name": "Multidimensional Array",
        "message": "📌 C programming me, 'Multidimensional Array' ek fixed size ke multiple variable ke group hai. Isme, hum ek variable ke group ko define karte hain aur unhe ek unique index set se access kar sakte hain.\n\n📌 Multidimensional Array ke declaration me, hum unke size aur data type batate hain. Iske baad hum unhe define karte hain aur unhe ek unique index set se access karte hain.\n\nExample:\n\nint arr[2][3];\n\narr[0][0] = 1;\narr[0][1] = 2;\narr[0][2] = 3;\narr[1][0] = 4;\narr[1][1] = 5;\narr[1][2] = 6;\n\nprintf(\"arr[1][2] = %d\\n\", arr[1][2]);\n\n📌 Is example me, hum ek Multidimensional Array 'arr' define karte hain aur usme 2x3 integers ko assign karte hain. Phir hum unhe ek unique index set se access karte hain. Is example ke baad, output of the code hoga:\n\narr[1][2] = 6\n\n📌 It is important to note that, Multidimensional Array ke size fixed hota hai. Isliye, hum unhe dynamically extend nahi kar sakte hain. Agar hum unke size ko change karna hai to hum ek naya Multidimensional Array define karte hain aur unhe copy karke usme shift kar denge.\n\n📌 It is also important to note that, Multidimensional Array ke index samajhne me, zero-based indexing ka use kiya jata hai. Isliye, hum array ke first element ko 0 se access karte hain aur last element ko (size-1) se access karte hain.\n\n📌 It is recommended to use Multidimensional Array, jab hum multiple fixed size ke elements ko store karna chahte hain aur unke index set ko access karne ki jarurat hai.\n\n"
    },
    {
        "id": 21,
        "name": "Function in C",
        "message": "📌 C programming mein functions ek block of code hai jo aapke program mein ek special task ko execute karta hai. Functions ka use aapko code ko modular aur organized banane mein help karta hai.\n\n📌 Functions ke 3 main parts hai:\n\n📍 1: Return Type: Function ke return type us type ka variable hota hai jo function apne call karne wale part ko back karne ke liye use karta hai. Agar function ko koi value back nahi karna hai to return type 'void' hota hai.\n\n📍 2: Function Name: Function ka name aap apne hisab se decide kar sakte hai, lekin iska use function ko call karne ke liye karna hoga.\n\n📍 3: Parameters: Parameters function ko call karne wale part se data pass karna hai function ko, isliye function ko ek list of parameters diye jate hai jo function ko use karna hai.\n\nExample:\n\n#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int sum = add(2, 3);\n    printf(\"The result is %d\\n\", sum);\n    return 0;\n}\n\n📌 Is example mein, 'add' function ke return type int hota hai aur ismein 2 integers diye gaye hai parameters. 'add' function ka use main function mein kiya gaya hai aur ismein 2 aur 3 diye gaye hai parameters. 'add' function call ke baad, iska result '5' hai jo main function mein 'sum' variable mein save kiya gaya hai.\n\n📌 Functions ke use aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek function ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai.\n\n📌 Functions ke some important rules:\n\n📍 1: Function ke return type aur name ke alawa, function ke parameters bhi decide karte hai.\n\n📍 2: Function ko define karne ke baad, call kar sakte hai.\n\n📍 3: Function ke scope ko define karne ke liye function ke alawa, aapke program mein function declaration bhi laga sakte hai.\n\n📍 4: Function ko recursive (self-calling) bhi banaya jata hai.\n\n"
    },
    {
        "id": 22,
        "name": "Parameterized Function",
        "message": "📌 Parameterized functions C programming mein functions hai jo kuch parameters lete hain jinse unki functionality decide ki ja sakti hai. Parameters function ko call karne wale part se data pass karna hai, isliye function ko ek list of parameters diye jate hai jo function ko use karna hai.\n\nExample:\n\n#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int sum = add(2, 3);\n    printf(\"The result is %d\\n\", sum);\n    return 0;\n}\n\n📌 Is example mein, 'add' function ke return type int hota hai aur ismein 2 integers diye gaye hai parameters. 'add' function ka use main function mein kiya gaya hai aur ismein 2 aur 3 diye gaye hai parameters. 'add' function call ke baad, iska result '5' hai jo main function mein 'sum' variable mein save kiya gaya hai.\n\n📌 Is example mein, 'add' function ke 2 parameters hai aur unhe a aur b ke naam se diye gaye hain. Aap is function ko call karne ke baad, unhe specific values diye jate hai aur unhe use function ke andar.\n\n📌 Parameterized functions ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek function ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai.\n\nParameters ke rules:\n\n📍 1: Parameters ko function ke definition mein define karte hai, function ke call karne wale part se data pass karne ke liye.\n\n📍 2: Parameters ko ek list mein define karte hai aur unhe function ke definition mein define karte hai.\n\n📍 3: Function ke parameters ko optional bhi bana sakte hai aur isse function ko default values mein call kar sakte hai.\n\n📍 4: Parameters ko pass by reference aur pass by value ke do tarah se pass kar sakte hai.\n\n"
    },
    {
        "id": 23,
        "name": "Recursive Function",
        "message": "📌 Recursive functions C programming mein functions hai jo apne aap ko repeatedly call karte hai. Isse aapko ek problem ko solve karne mein help mil sakta hai jo recursive nature ke hisab se solve kiya jata hai.\n\n📌 Recursive function ke 2 main parts hai:\n\n📍 1: Base Case: Base case ek condition hota hai jisme function ko apne aap ko stop karne ke liye kaam karna hoga.\n\n📍 2: Recursive Case: Recursive case ek condition hota hai jisme function apne aap ko call karte hai.\n\nExample:\n\n#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"The factorial of %d is %d\\n\", num, result);\n    return 0;\n}\n\n📌 Is example mein, 'factorial' function recursive function hai jo n ka factorial calculate karta hai. 'factorial' function ke 1 base case hai jisme n == 0 hai aur iska return 1 hota hai. Agar n != 0 hai to function apne aap ko n * factorial(n - 1) se call karta hai.\n\n📌 Recursive functions ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek function ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai.\n\n📌 Recursive functions ke some important rules:\n\n📍 1: \n\n📍 2: \n\n📍 3: \n\n📍 4: \n\n📌 Recursive functions ke use se aapko C programming mein code likhne ka aur debug karne ka maza aata hai.\n\n📌 Note: Recursive functions ko use karne se aapko code ko simple aur easy banane mein help mil sakta hai, lekin recursive functions ke hisab se code ka execution time aur memory ka use barbad nahi karna chahiye.\n\n"
    },
    {
        "id": 24,
        "name": "Call By Value And Call By Reference",
        "message": "📌 C programming mein functions ke parameters pass karne ke do tarah hoti hai: Call By Value aur Call By Reference.\n\n📌 Call By Value: Call By Value mein, function ke parameters ko pass karne ke liye, copy of actual parameter ke values pass hote hai. Isliye, agar function mein any changes kar liye jate hai, to actual parameter ke values mein koi changes nahi hoti. Call By Value ka use generally small data types ke liye hota hai.\n\n📌 Call By Reference: Call By Reference mein, function ke parameters ko pass karne ke liye, actual parameter ke addresses pass hote hai. Isliye, agar function mein any changes kar liye jate hai, to actual parameter ke values mein bhi changes hoti hai. Call By Reference ka use generally complex data types ke liye hota hai.\n\nExample:\n\n#include <stdio.h>\n\nvoid swapByValue(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nvoid swapByReference(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int num1 = 5, num2 = 10;\n\n    printf(\"Before swapping: num1 = %d, num2 = %d\\n\", num1, num2);\n\n    swapByValue(num1, num2);\n    printf(\"After swapping by value: num1 = %d, num2 = %d\\n\", num1, num2);\n\n    swapByReference(&num1, &num2);\n    printf(\"After swapping by reference: num1 = %d, num2 = %d\\n\", num1, num2);\n\n    return 0;\n}\n\n📌 Is example mein, 'swapByValue' function Call By Value ka use kar rakha hai aur 'swapByReference' function Call By Reference ka use kar rakha hai. 'swapByValue' function mein, num1 aur num2 ke copy pass hote hai aur ismein koi changes nahi hoti. 'swapByReference' function mein, num1 aur num2 ke addresses pass hote hai aur ismein actual values mein bhi changes hoti hai.\n\n📌 Call By Value aur Call By Reference ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek function ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai.\n\n📌 Call By Value aur Call By Reference ke some important rules:\n\n📍 1: Call By Value mein, function ke parameters ko pass karne ke liye, copy of actual parameter ke values pass hote hai.\n\n📍 2: Call By Reference mein, function ke parameters ko pass karne ke liye, actual parameter ke addresses pass hote hai.\n\n📍 3: Call By Value ka use generally small data types ke liye hota hai.\n\n📍 4: Call By Reference ka use generally complex data types ke liye hota hai.\n\n📍 5: Call By Value mein, actual parameter ke values mein koi changes nahi hoti.\n\n📍 6: Call By Reference mein, actual parameter ke values mein bhi changes hoti hai.\n\n"
    },
    {
        "id": 25,
        "name": "Structure in C",
        "message": "📌 C programming mein, structure ek user-defined data type hai jo multiple variables ko ek sath rakhta hai. Isse, aap ek single entity mein multiple data types ke variables ko store kar sakte hai. Structure ke variables ko fields ya members kehte hai.\n\nExample:\n\n#include <stdio.h>\n\nstruct Employee {\n    int id;\n    char name[30];\n    float salary;\n};\n\nint main() {\n    struct Employee e1;\n\n    e1.id = 101;\n    strcpy(e1.name, \"Rajesh Kumar\");\n    e1.salary = 45000.00;\n\n    printf(\"ID: %d\\n\", e1.id);\n    printf(\"Name: %s\\n\", e1.name);\n    printf(\"Salary: %.2f\\n\", e1.salary);\n\n    return 0;\n}\n\n📌 Is example mein, 'Employee' structure ke 3 fields hai: id, name aur salary. 'Employee' structure ko define karne ke baad, e1 ke naam se ek variable bana diya gaya hai aur ismein structure ke fields mein data store kiya gaya hai.\n\n📌 Structure ke some important features:\n\n📍 1: Structure ke fields ke type keval those variables hona chahiye jo fundamental data types ke hain.\n\n📍 2: Structure ke fields ke type keval fundamental data types hona chahiye, lekin ismein structure ko include kar sakte hai.\n\n📍 3: Structure ko define karne ke baad, use karne ke liye variable banaani hogi.\n\n📍 4: Structure ko define karne ke baad, use karne ke liye ek object banaani hogi.\n\n📍 5: Structure ka size determined nahi hota hai, isliye ek structure ko another structure ke part naheen banaya jaa sakta.\n\n📍 6: Structure ko define karne ke baad, use karne ke liye ek object banaai jati hai aur ismein fields mein data store karte hai.\n\n📌 Structure ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek structure ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai.\n\n"
    },
    {
        "id": 26,
        "name": "Pointers in C",
        "message": "📌 C programming mein, pointer ek variable hai jo baad mein memory ke address ko store kar sakte hai. Pointers ke use se aapko memory ke direct manipulation karne mein help karta hai.\n\nExample:\n\n#include <stdio.h>\n\nint main() {\n    int a = 10;\n    int *p;\n\n    p = &a; // Pointer ke address mein variable ke address ko store kar diya gaya hai\n\n    printf(\"Value of a: %d\\n\", a);\n    printf(\"Address of a: %p\\n\", &a);\n    printf(\"Value of p: %p\\n\", p);\n\n    return 0;\n}\n\n📌 Is example mein, 'a' variable ke address ko pointer variable 'p' mein store kar diya gaya hai. Pointer variable 'p' ko use karke, aap 'a' variable ke value ko direct get sakte hai.\n\n📌 Pointers ke some important features:\n\n📍 1: Pointer variable ko declare karne ke baad, memory ko allocate nahi hota hai.\n\n📍 2: Pointer variable ko use karke, aap memory ke direct manipulation kar sakte hai.\n\n📍 3: Pointer variable ko declare karne ke baad, use karne ke liye ek variable banaai jati hai.\n\n📍 4: Pointer variable ko use karke, aap memory ke direct manipulation kar sakte hai.\n\n📍 5: Pointer variable ko use karne ke baad, use karne ke liye ek variable banaai jati hai.\n\n📍 6: Pointer variable ko use karne ke baad, use karne ke liye ek variable banaai jati hai aur ismein memory ke address ko store kar diya gaya hai.\n\n📌 Pointers ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek pointer ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai.\n\nPointers ke use se aapko C programming mein code likhne ka aur debug karne ka maza aata hai.\n\n📌 Note: Pointers ke use se aapko memory ke direct manipulation karne mein help karta hai, lekin use karne ke liye ek variable banaai jati hai. Pointers ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai."
    }
]

[
    {
        "id": "01",
        "name": "Introduction",
        "message": "游린 Java ek general-purpose computer programming language hai. Iska developer Sun Microsystems tha, jinhein 2010 mein Oracle Corporation ne acquire kiya tha. Is language ko 1995 mein launch kiya gaya tha.\n\n游린 Java ek object-oriented programming language hai, jismein hum objects aur classes ka use karte hain. Ismein, humein ek codebase ko har platform par chalane ke liye compile karne ki zaroorat nahi hai. Isliye, Java ko \"write once, run anywhere\" approach ke naam se jaana jata hai.\n\n游린 Ismein, humein Java Virtual Machine (JVM) ke through program execute karna padta hai. JVM har platform par chalta hai, isliye Java ke code ko har jagah chalane ke liye compile karne ki zaroorat nahi hai.",
        "example":"1",
        "remcont":"游린 Java ke paar, humein web-based applications, mobile applications, desktop applications, enterprise applications, etc. banaane ke liye use kar sakte hain. Ismein, humein exception handling bhi kar sakte hain, jisse aap program ke dair-dair errors ko handle kar sakte hain.\n\n游린 Iske alawa, Java ek robust aur secure language hai, isliye iska use financial, healthcare, education, etc. industries mein bahut mahatvapurn hai. Ismein bahut se libraries aur frameworks bhi available hain, jisse hum aapke requirements ke anuroop applications bana sakte hain.\n\n游린 Java ke paar pichhle saalon mein bahut se updates aur version aaye hain, jaise ki Java 9, Java 10, Java 11, etc. Iske saath, bahut se new features aur improvements bhi aaye hain. Isliye, agar aap Java sikhna chahte hain, to aap iske naye versions ko bhi sikhna chahiye.\n\n"
    },
    {
        "id": "02",
        "name": "Installation",
        "message": "游린 Java ko install karne ke liye, aap Java Development Kit (JDK) ko apne computer par install karna chaahate hain. JDK ko Oracle website se download kar sakte hain.",
        "example":"1",
        "remcont":"游늷 1. Oracle website pe jaakar, \"Download JDK\" ko click karo.\n\n游늷 2. Apne computer ki operating system ke anuroop JDK ko download karo.\n\n游늷 3. JDK installer ko chalo aur installation process ko follow karo.\n\n游늷 4. Installation process mein, aapko ek screen milega jismein aapko \"Install\" button dikhaai dega. Is button ko click karo aur installation process shuru ho jaayegi.\n\n游늷 5. Installation process ke baad, aapka computer mein Java install ho jaayega.\n\n游늷 6. Installation ke baad, aapke system ke PATH variable ko update karna chaahiye hai. PATH variable ko update karne ke liye, aapko system settings ke settings mein jaana hoga.\n\n游늷 7. Settings mein, \"Environment Variables\" ko click karo aur \"Path\" ko select karo.\n\n游늷 8. \"Path\" ko edit karne ke liye, \"Edit\" button ko click karo aur ek neeche wala empty field mein, aapko Java bin directory ko paste karna hoga. Java bin directory ko paste karne ke baad, \"OK\" button ko click karo.\n\n游늷 9. Isse, aapka computer ready hoga Java ke applications ko run karne ke liye.\n\n"
    },
    {
        "id": "03",
        "name": "Java Syntax",
        "message": "游린 Ek Java program shuru ho jaata hai ek class ke saath.\nclass ke andar, hum apne program ka main method define karte hain, jismein humein program ka entry point bataya jata hai.",
        "example": "class HelloJava {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Welcome to Codewati Tech Private Limited:)\");\n    }\n}",
        "remcont": "游린 Iska matlab yeh hai ki hum Java mein, objects aur functions ka use karte hain. \"System\" ek object hai jise hum use karte hain Java runtime ke liye. \"out\" ek variable hai jiska matlab yeh hai ki output stream. Aur \"println\" ek function hai jismein hum string ko print karwate hain aur ek endline character bhi add karte hain.\n\n"
    },
    {
        "id": "04",
        "name": "Comments",
        "message": "游린 Java mein, hum code ke liye comments bhi likh sakte hain. Comments code ko user ke liye explain karte hain aur code ko neat aur clean banate hain.\n\n游린 Hum Java mein, do types ke comments likh sakte hain:\n\n游늷 1. Single line comments:\nSingle line comments ek line mein comments ka kaam karte hain. Iske liye, hum // ka use karte hain.\n\n游늷 2. Multi-line comments:\nMulti-line comments mein, hum bahut saare lines comments kar sakte hain. Iske liye, hum /* aur */ ka use karte hain.",
        "example": "public class HelloWorld {\n    // This is a single line comment\n    public static void main(String[] args) {\n        /*\n         * This is a\n         * multi-line comment\n         */\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "remcont": "0"
    },
    {
        "id": "05",
        "name": "Variables",
        "message": "游린 Java mein, hum data ko store karna chahte samay, hum variables ka use karte hain. Variable ek memory location hai jismein hum data ko store kar sakte hain.\n\n游린 Hum variables ke saath data ko access kar sakte hain aur change kar sakte hain. Har variable ek data type hoga jaise ki int, float, char, boolean, string, etc.\n\n",
        "example": "int age;\nage = 25;\nString name = \"John Doe\";",
        "remcont": "游린 In this example, we have defined two variables:\n\n游늷 1. 'age': Ek integer variable hai jismein hum age ka data store kar sakte hain.\n游늷 2. 'name': Ek string variable hai jismein hum name ka data store kar sakte hain.\n\n游린 Hum, variables ko initialize karte samay, hum unhe ek value assign karte hain. Is value, variables ke data type ke anuroop hota hai.\n\n游린 Hum, variables ko bahut saare modifiers se define kar sakte hain, jaise ki access modifiers, non-access modifiers, etc.\n\n"
    },
    {
        "id": "06",
        "name": "Final Variables",
        "message": "游린 Java mein, hum variables ko final keyword se constant banate hain. Final variables ke through, hum ek value ko ek baar assign kar sakte hain, aur phir usse bad value nahi set kar sakte. Isliye, final variables ke through, hum immutable objects bana sakte hain.\n",
        "example": "public final int MAX_COUNT = 100;",
        "remcont": "游린 Is example mein, humne ek final variable MAX_COUNT define kiya hai aur usmein humne value 100 assign kiya hai. Ab hum is variable ko bad value nahi set kar sakte."
    },
    {
        "id": "07",
        "name": "Data Types",
        "message": "游린 Java mein, hum data ko store karne ke liye variables ka use karte hain. Is variables mein, hum data ko ek data type ke roop mein store karte hain. Java mein, humein do types ke data types ke bare mein jaana hai:\n\n游늷 1.~Primitive Data Types: \n游늸~int: Ek 32-bit signed integer hai, jo -2^31 taiyari se 2^31-1 tak values store kar sakti hai.\n游늸~float: Ek 32-bit IEEE 754 single-precision floating-point number hai.\n游늸~double: Ek 64-bit IEEE 754 double-precision floating-point number hai.\n游늸~boolean: Ek boolean value hai, jo true ya false ho sakta hai.\n游늸~char: Ek Unicode character ko store karta hai.\n游늸~byte: Ek 8-bit signed integer hai, jo -128 taiyari se 127 tak values store kar sakta hai.\n游늸~short: Ek 16-bit signed integer hai, jo -32768 taiyari se 32767 tak values store kar sakta hai.\n游늸~long: Ek 64-bit signed integer hai, jo -263 taiyari se 263-1 tak values store kar sakta hai.\n\n游늷 2.~Reference Data Types: \n游늸~Classes: Hum objects ko create karta hai.\n游늸~Interfaces: Hum objects ke behavior ko define karta hai.\n游늸~Arrays: Hum homogeneous values ko ek jagah mein store karta hai.\n游늸~Strings: Hum characters ka sequence store karta hai.\n",
        "example": "// int variable\nint myAge = 25;\nSystem.out.println(\"Meri Age: \" + myAge);\n\n//float variable\nfloat pi = 3.14f;\nSystem.out.println(\"Pi ki value: \" + pi);\n\n//boolean variable\nboolean isHungry = true;\nSystem.out.println(\"Mujhe bhook lag rahi hai?: \" + isHungry);\n\n//String variable\nString myName = \"Abhivishrut Bishnoi\";\nSystem.out.println(\"Mera Naam: \" + myName);\n\n//char variable\nchar myLetter = 'A';\nSystem.out.println(\"Mera alphabet: \" + myLetter);",
        "remcont": "游늷 In Example int: humne ek int variable myAge banaya hai aur usmein humne value 25 assign kiya hai. Aur humne System.out.println() ka use karke hum myAge ki value ko console mein print karwai hai.\n\n游늷 In Example float: humne ek float variable pi banaya hai aur usmein humne value 3.14 assign kiya hai. Aur humne System.out.println() ka use karke hum pi ki value ko console mein print karwai hai.\n\n游늷 In Example boolean: humne ek boolean variable isHungry banaya hai aur usmein humne value true assign kiya hai. Aur humne System.out.println() ka use karke hum isHungry ki value ko console mein print karwai hai.\n\n游늷 In Example char: humne ek char variable myLetter banaya hai aur usmein humne value 'A' assign kiya hai. Aur humne System.out.println() ka use karke hum myLetter ki value ko console mein print karwai hai.\n\n"
    },
    {
        "id": "08",
        "name": "Operators",
        "message": "游린 Java mein operators ek very important part hai. Operators help to perform arithmetic, relational, logical, and other operations on variables and values.\n\n游린 Hum Java mein, do types ke operators ka use karte hain:\n游늷 1. Unary Operators: Ek operator hai jise sirf ek operand ke saath use kiya jata hai.\n游늷 2. Binary Operators: Ek operator hai jise do operands ke saath use kiya jata hai.\n\n游린 Java mein, humein do types ke unary operators ka use karne mein familiar ho jaana chahiye:\n\n游늷 1. Pre-Increment Operator: '++'\nYahan, humein pre-increment operator ka use karke, hum ek variable ko increase karwate hain. Iske liye, hum ++ operator ko variable ka aage rakhte hain.\n\n游늷 2. Pre-Decrement Operator: '--'\nYahan, humein pre-decrement operator ka use karke, hum ek variable ko decrease karwate hain. Iske liye, hum -- operator ko variable ka aage rakhte hain.\n\n",
        "example": "public class OperatorsDemo {\n    public static void main(String[] args) {\n        // Pre Increment Operator\n        int a = 5;\n        System.out.println(\"Original value of a: \" + a);\n        ++a;\n        System.out.println(\"After pre-increment, a is now: \" + a);\n\n        // Pre Decrement Operator\n        int b = 10;\n        System.out.println(\"Original value of b: \" + b);\n        --b;\n        System.out.println(\"After pre-decrement, b is now: \" + b);\n\n        // Addition Operator\n        int num1 = 5;\n        int num2 = 10;\n        int sum = num1 + num2;\n        System.out.println(\"Sum of \" + num1 + \" and \" + num2 + \" is: \" + sum);\n\n        // Subtraction Operator\n        int x = 15;\n        int y = 10;\n        int difference = x - y;\n        System.out.println(\"Difference of \" + x + \" and \" + y + \" is: \" + difference);\n\n        // Multiplication Operator\n        int p = 4;\n        int q = 5;\n        int product = p * q;\n        System.out.println(\"Product of \" + p + \" and \" + q + \" is: \" + product);\n\n        // Division Operator\n        int dividend = 20;\n        int divisor = 4;\n        int quotient = dividend / divisor;\n        System.out.println(\"Quotient of \" + dividend + \" divided by \" + divisor + \" is: \" + quotient);\n\n        // Modulus Operator\n        int dividendMod = 20;\n        int divisorMod = 3;\n        int remainder = dividendMod % divisorMod;\n        System.out.println(\"Remainder of \" + dividendMod + \" divided by \" + divisorMod + \" is: \" + remainder);\n\n        // Post Increment Operator\n        int num = 5;\n        int incrementedNum = num++;\n        System.out.println(\"Original value of num: \" + num);\n        System.out.println(\"Value of incrementedNum: \" + incrementedNum);\n\n        // Post Decrement Operator\n        int numDec = 10;\n        int decrementedNum = numDec--;\n        System.out.println(\"Original value of numDec: \" + numDec);\n        System.out.println(\"Value of decrementedNum: \" + decrementedNum);\n    }\n}",
        "remcont": "游린 Hum Java mein, bahut saare operators ka use kar sakte hain, jaise ki multiplication operator (*), division operator (/), modulus operator (%), etc.\n\n游린 Hum Java mein, bahut saare logical operators ka use kar sakte hain, jaise ki AND operator (&&), OR operator (||), NOT operator (!), etc.\n\n游린 Hum Java mein, bahut saare relational operators ka use kar sakte hain, jaise ki equal to operator (==), not equal to operator (!=), less than operator (<), etc.\n\n游린 Hum Java mein, assignment operators ka use bhi kar sakte hain, jaise ki =, +=, -=, *=, /=, %=, etc.\n\n游린 Iske alawa, hum Java mein, increment (++), decrement (--), bitwise (&, |, ^, ~, <<, >>, >>>), shift (<<<, >>>), conditional (? :), and ternary (?:) operators ka use bhi kar sakte hain.\n\n游린 Iske liye, operators ek very important part of Java programming hai. Operators help to perform arithmetic, relational, logical, and other operations on variables and values.\n\n"
    },
    {
        "id": "09",
        "name": "Type Casting",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "10",
        "name": "String",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "11",
        "name": "if else",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "12",
        "name": "while Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "13",
        "name": "do while Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "14",
        "name": "for Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "15",
        "name": "continue Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "16",
        "name": "break Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "17",
        "name": "switch Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "18",
        "name": "Exception Handling",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "19",
        "name": "try catch",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "20",
        "name": "Array",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "21",
        "name": "Array Traversing",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "22",
        "name": "Multidimensional Array",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "23",
        "name": "OOPs Concepts",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "24",
        "name": "Class And Object",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "25",
        "name": "Static Members",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "26",
        "name": "Non-Static Members",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "27",
        "name": "Constructor",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "28",
        "name": "Access Modifiers",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "29",
        "name": "Encapsulation",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "30",
        "name": "Packages",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "31",
        "name": "Inheritance",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "32",
        "name": "Method Overloading",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "33",
        "name": "Method Overriding",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "34",
        "name": "super Keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "35",
        "name": "Polymorphism",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "36",
        "name": "Inner Class",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "37",
        "name": "Abstract Class",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "38",
        "name": "Interface",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "39",
        "name": "final Keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "40",
        "name": "Method Introduction",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "41",
        "name": "Parameterized Method",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "42",
        "name": "User input",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "43",
        "name": "Date and Time",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "44",
        "name": "ArrayList",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "45",
        "name": "LinkedList",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "46",
        "name": "HashMap",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "47",
        "name": "HashSet",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "48",
        "name": "Iterator",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "49",
        "name": "finally block",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "50",
        "name": "throw keyword",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "51",
        "name": "File Handling",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "52",
        "name": "Create / Write File",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "53",
        "name": "Read File",
        "message": "",
        "example": "",
        "remcont": ""
    }
    
]

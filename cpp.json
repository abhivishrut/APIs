[
    {
        "id": "1",
        "name": "Introduction",
        "message": "📌 C++ programming ek high-level programming language hai jo C programming se bani hui hai. C++ programming ko oriented object programming language kehte hai, isliye C++ programming mein classes, objects, inheritance, polymorphism, encapsulation, abstraction concepts aate hai. C++ programming ko primarily system programming aur application development ke liye use kiya jata hai.\n\n📌 C++ programming ke some important features:\n\n📍 1: C++ programming mein oriented object programming concepts aate hai.\n\n📍 2: C++ programming mein functions aur variables ke scope ko local aur global mein divide kiya jata hai.\n\n📍 3: C++ programming mein functions aur variables ko function overloading aur operator overloading ke through define kiya jata hai.\n\n📍 4: C++ programming mein exception handling ka use kiya jata hai.\n\n📍 5: C++ programming mein templates ka use kiya jata hai.\n\n📍 6: C++ programming mein STL (Standard Template Library) ka use kiya jata hai.\n\n📌 C++ programming ke use se aapko code ko modular aur organized banane mein help karta hai aur code ka reuse bhi ho jata hai. Agar aap ek class ka use repeat karne ki jarurat hai, to aap usko ek baar define karke, repeatedly use kar sakte hai. C++ programming mein, classes aur objects ke use se aapko code ko reuse karne mein help milti hai aur code ko modular aur organized banane mein bhi help milti hai.\n\n📌 C++ programming ke use se aapko C++ programming mein code likhne ka aur debug karne ka maza aata hai. C++ programming ke use se aapko system programming aur application development ke liye help milta hai.\n\n"
    },
    {
        "id": "2",
        "name": "Installation",
        "message": "📌 C++ programming ko Windows mein install karne ke liye, aapko ek compiler install karna hoga jo C++ programming code ko execute kar sakta hai. Ek compiler C++ programming ko machine code mein translate karta hai aur machine code ko execute karne ke liye operating system ko use karta hai.\n\n📌 Ek popular C++ programming compiler Microsoft Visual Studio hai. Isse Windows mein C++ programming ko install kar sakte hai.\n\n📌 Microsoft Visual Studio ko install karne ke liye, aapko Microsoft Visual Studio ke website par ja kar, 'Download' button par click karke, 'Free download' option ko select karke, download kar sakte hai.\n\n📌 Download karne ke baad, installer ko chalane ke baad, installation process shuru hoga. Installation process mein, aapko ek screen dikhai dega jisme, 'Workloads' tab ko select karna hoga aur 'Desktop development with C++' workload ko select karke, 'Install' button par click kar sakte hai.\n\n📌 Installation process ke baad, Microsoft Visual Studio ko open karke, 'New Project' option ko select kar sakte hai aur, 'Win32 Console Application' project template ko select karke, 'Next' button par click kar sakte hai. Ab aapko ek screen dikhai dega jisme, 'Project name' aur 'Location' ko enter kar sakte hai aur, 'Create' button par click karke, project ko create kar sakte hai.\n\n📌 Microsoft Visual Studio ke through, aap C++ programming code ko write, compile aur run kar sakte hai.\n\n📌 Note: Ek doosra popular C++ programming compiler MinGW hai. Isse Windows mein C++ programming ko install kar sakte hai. MinGW ko install karne ke liye, aapko MinGW ki website par ja kar, 'Download' button par click karke, 'Automated Installer ko download kar sakte hai. Download karne ke baad, installer ko chalane ke baad, installation process shuru hoga. Installation process mein, aapko ek screen dikhai dega jisme, 'Select Components' tab ko select karna hoga aur, 'mingw-developer-toolkit' ko select karke, 'Next' button par click kar sakte hai. Installation process ke baad, MinGW ke through, C++ programming code ko write, compile aur run kar sakte hai.\n\n"
    },
    {
        "id": "3",
        "name": "Syntax",
        "message": "📌 C++ programming mein, syntax ek set of rules hai jo aapko C++ programming code likhne ke liye follow karna hoga. C++ programming mein, syntax ke rules define karte hai ki kaise variable declare karte hai, kaise functions define aur call karte hai aur kaise control structures use karte hai.\n\n📌 C++ programming mein, syntax ko follow karne se aapko code likhne mein help milta hai aur code ka execution time aur memory ka use kam hota hai.\n\n📌 C++ programming mein, syntax ke kuch important rules hai:\n\n📍 1: C++ programming mein, code ko semicolon (;) ke saath end karne chahiye.\n\nExample:\n\nint a;   // Correct\nint a; // Incorrect\n\n📍 2: C++ programming mein, functions ka return type define karne chahiye.\n\nExample:\n\nint add(int a, int b) { // Correct\n    return a + b;\n}\nvoid add(int a, int b) { // Incorrect\n    return a + b;\n\n📍 3: C++ programming mein, variables ko declare karne se pehle, data types define karne chahiye.\n\nExample:\n\nint a; // Correct\na = 10;\n\nint; // Incorrect\na = 10;\n\n📍 4: C++ programming mein, comments ko double slash (//) ya /* */ ke saath shuru karte hai aur end karte hai.\n\nExample:\n\n// This is a single line comment\n/* This is a\nmulti-line comment */\n\n📍 5: C++ programming mein, string literal ko double quotes ke saath define karte hai.\n\nExample: string str = 'Hello World'; // Correct\nstring str = 'Hello World'; // Incorrect\n\n📍 6: C++ programming mein, keywords ko reserve karte hai.\n\nExample:\n\nint main() { // Correct\n    return 0;\n}\n\nint Main() { // Incorrect\n    return 0;\n}\n\n📍 7: C++ programming mein, operators ke use se aapko variables aur expressions ko manipulate karne mein help milta hai.\n\nExample:\n\nint a = 10;\nint b = 20;\nint c = a + b; // Correct\nint c = a +; // Incorrect\n\n📍 8: C++ programming mein, loops aur conditionals ke use se aapko code ko control karne mein help milta hai.\n\nExample:\n\nint a = 10;\nif (a > 5) { // Correct\n    cout << \"a is greater than 5\";\n}\n\nint a = 10;\nif (a > 5) { // Incorrect\n    cout << \"a is greater than 5\";\n    cout << \"a is greater than 5\";\n}\n\n📍 9: C++ programming mein, functions ke use se aapko code ko modular aur organized banane mein help karta hai.\n\nint add(int a, int b) { // Correct\n    return a + b;\n}\n\nint main() {\n    int a = 10;\n    int b = 20;\n    int c = add(a, b);\n    return 0;\n}\n\nint add(int a, int b) { // Incorrect\n    return a + b;\n}\n\nint main() {\n    int a = 10;\n    int b = 20;\n    int c = a + b;\n    return 0;\n}\n\n📌 C++ programming mein, syntax ke rules follow karne se aapko code likhne ka aur debug karne ka maza aata hai.\n\n"
    },
    {
        "id": "4",
        "name": "Run First Program",
        "message": "First C++ Program Example:\n\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello World!\";\n    return 0;\n}\n\n📌 C++ programming mein, aapko pehle program run karne ke liye, ek compiler install karna hoga jo C++ programming code ko execute kar sakta hai. Ek compiler Microsoft Visual Studio hai. Isse Windows mein C++ programming ko run kar sakte hai.\n\n📌 Microsoft Visual Studio ko install karne ke liye, aapko Microsoft Visual Studio ke website par ja kar, 'Download' button par click karke, 'Free download'  option ko select karke, download kar sakte hai.\n\n📌 Download karne ke baad, installer ko chalane ke baad, installation process shuru hoga. Installation process mein, aapko ek screen dikhai dega jisme, 'Workloads' tab ko select karna hoga.\n\n📌 Workloads tab mein, 'Desktop development with C++' option ko select karke, 'Install' button par click karke, installation process shuru hoga.\n\n📌 Installation process ke baad, aapko Microsoft Visual Studio ke 'New Project' option par ja karke, 'Console App' option ko select karke, 'Create' button par click karke, aapko pehle program run karne ke liye code likhne ke liye hai.\n\n📌 Aapko pehle program run karne ke liye, aapko ek 'main' function likhna hoga. Main function, C++ programming mein code ko run karne ke liye use hota hai. Main function ko define karne ke liye, aapko 'int main()' likh sakte hai.\n\n📌 Main function mein, aapko 'cout' ke saath output print karne ke liye use karenge. 'cout' ko 'include' statement mein include karne hogi.\n\n📌 Main function mein, aapko 'return 0;' statement likh sakte hai. 'return 0;' statement, program ko successful execution hone ke liye '0' return karne ke liye use hota hai.\n\n📌 Aapko pehle program run karne ke liye, aapko 'int main()' function mein 'cout' ke saath output print karne ke baad, 'return 0;' statement likh karke, program ko run kar sakte hai.\n\n📌 Aapko pehle program run karne ke liye, aapko 'Run' button par click karke, program ko run kar sakte hai. Program ko run karne ke baad, aapko 'Hello World!' output ko dekh sakte hai.\n\n📌 C++ programming mein, syntax ke rules follow karne se aapko code likhne mein help milta hai aur code ka execution time aur memory ka use kam hota hai. Syntax ke rules follow karne se aapko code ka quality improve hota hai aur code ko maintain aur debug karne mein help karta hai."
    },
    {
        "id": "5",
        "name": "Comments in C++",
        "message": "📌 C++ programming mein, comments bhi important hai. Comments, code ke explanation ke liye use hote hai. Comments ko code mein include karne se, aapko code ke functionality ko samajh sakte hai.\n\n📌 C++ programming mein, comments ko two types mein define kar sakte hai. Yeh dono types hain:\n\n📍 1: Single line comments: Yeh comments, line ke end mein hogi. Yeh comments ko \"//\" se start karne hogi.\n\n📍 2: Multi-line comments: Yeh comments, \"/\" se start hogi aur \"/\" se end hogi. Yeh comments, multiple lines ke code ko comment karne ke liye use hote hai.\n\nExample:\n\n// This is a single line comment\n\n/* This is a multi-line comment\n   This comment can span multiple lines\n   This is an example of a multi-line comment\n*/\n\n"
    },
    {
        "id": "6",
        "name": "Variables",
        "message": "📌 C++ programming mein, variables ek memory location hai jahan data ko store kar sakte hai. Variables ke saath, aapko data ko access aur manipulate karne mein help milta hai.\n\n📌 C++ programming mein, variables ko declare karne ke liye, aapko data type define karna hoga. Data type, variable ke saath store karne ke liye allowed hone wale data ko define karne ke liye use hota hai.\n\n📌 Iske alawa, C++ programming mein, variables ko declare karne ke liye, aapko variable ke naam bhi define karna hoga. Variable ke naam, alphabets, digits aur underscore ke saath define kar sakte hai. Lekin, variable ke sare alphabets aur underscore ke saath shuru hota hai.\n\n📌 C++ programming mein, variables ko declare karne ke baad, aapko variable ko initialize karna hoga. Initialize karne ke liye, aapko variable ke saath data assign karna hoga.\n\n📌 C++ programming mein, variables ke saath, ek doosre variables ke saath bhi arithmetic, relational aur logical operators use kar sakte hai.\n\n📌 C++ programming mein, variables ke different types hai. Yeh hain:\n\n📍 1: int (integer)\n\n📍 2: float\n\n📍 3: double\n\n📍 4: char (character)\n\n📍 5: bool (boolean)\n\nExample:\n\n#include <iostream>\nint main() {\n    int a = 10; // declare a variable of type int\n    float b = 3.14; // declare a variable of type float\n    char c = 'A'; // declare a variable of type char\n    bool d = true; // declare a variable of type bool\n\n    std::cout << \"Value of a: \" << a << std::endl;\n    std::cout << \"Value of b: \" << b << std::endl;\n    std::cout << \"Value of c: \" << c << std::endl;\n    std::cout << \"Value of d: \" << d << std::endl;\n\n    return 0;\n}\n\n📌 Is example mein, \"int\", \"float\", \"char\" aur \"bool\" data type ke saath variables declare kiye gaye hain aur unme data assign kiye gaye hain.\n\n📌 C++ programming mein, variables ko declare karne ke baad, aapko variable ko use kar sakte hai. Use karne ke baad, aapko variable ko change kar sakte hai aur aapko variable mein data ko access aur manipulate kar sakte hai.\n\n📌 C++ programming mein, syntax ke rules follow karne se aapko code likhne mein help milta hai aur code ka execution time aur memory ka use kam hota hai. Syntax ke rules follow karne se aapko code ka quality improve hota hai aur code ko maintain aur debug karne mein help karta hai.\n\n"
    },
    {
        "id": "7",
        "name": "Constant Variables",
        "message": "📌 C++ programming mein, constant variables, variables hai jo value change nahi kar sakte hai. Constant variables ko define karne ke baad, unki value change nahi kar sakte hai. Constant variables ko declare karne ke liye, aapko \"const\" keyword ka use karna hoga.\n\n📌 C++ programming mein, constant variables ko declare karne ke baad, aapko unki value assign karna hoga. Initialize karne ke baad, aapko unki value change nahi kar sakte hai.\n\nExample:\n\n#include <iostream>\nint main() {\n    const int a = 10;        // declare a constant variable of type int\n    // a = 20;        // This will give an error\n\n    std::cout << \"Value of a: \" << a << std::endl;\n\n    return 0;\n}\n\n📌 Is example mein, \"const int\" ke saath \"a\" constant variable declare kiya gaya hai aur isme 10 value assign kiya gaya hai. Phir, aapko \"a\" variable ko 20 value ke saath change nahi kar sakte hai.\n\n📌 C++ programming mein, constant variables ko declare karne ke baad, aapko unki value change nahi kar sakte hai. Lekin, aapko unki value access kar sakte hai.\n\n📌 C++ programming mein, constant variables ko declare karne ke baad, aapko unki value access kar sakte hai aur aapko unki value ko use kar sakte hai.\n\n📌 C++ programming mein, syntax ke rules follow karne se aapko code likhne mein help milta hai aur code ka execution time aur memory ka use kam hota hai. Syntax ke rules follow karne se aapko code ka quality improve hota hai aur code ko maintain aur debug karne mein help karta hai.\n\n\n📌 Note: C++ programming mein, constant variables ko define karne ke liye, aapko \"const\" keyword ka use karna hoga. Constant variables ko declare karne ke baad, aapko unki value assign karna hoga. Initialize karne ke baad, aapko unki value change nahi kar sakte hai.\n\n"
    },
    {
        "id": "8",
        "name": "Data Types",
        "message": "📌 C++ programming mein, data types, variables ko define karne ke liye use hoti hai. Data types, variable ke saath store karne ke liye allowed hone wale data ko define karne ke liye use hoti hai.\n\n📌 C++ programming mein, variables ko declare karne ke baad, aapko variable ko initialize karna hoga. Initialize karne ke liye, aapko variable ke saath data assign karna hoga.\n\n📌 C++ programming mein, variables ke different types hai. Yeh hain:\n\n📍 1: int (integer)\n\n📍 2: float\n\n📍 3: double\n\n📍 4: char (character)\n\n📍 5: bool (boolean)\n\nExample:\n\n#include <iostream>\n\nint main() {\n    int a = 10;      // declare a variable of type int\n    float b = 3.14;      // declare a variable of type float\n    char c = 'A';      // declare a variable of type char\n    bool d = true;      // declare a variable of type bool\n\n    std::cout << \"Value of a: \" << a << std::endl;\n    std::cout << \"Value of b: \" << b << std::endl;\n    std::cout << \"Value of c: \" << c << std::endl;\n    std::cout << \"Value of d: \" << d << std::endl;\n\n    return 0;\n}\n\n📌 Is example mein, \"int\", \"float\", \"char\" aur \"bool\" data type ke saath variables declare kiye gaye hain aur unme data assign kiye gaye hain.\n\n📌 C++ programming mein, variables ko declare karne ke baad, aapko variable ko use kar sakte hai. Use karne ke baad, aapko variable ko change kar sakte hai aur aapko variable mein data ko access aur manipulate kar sakte hai.\n\n📌 C++ programming mein, syntax ke rules follow karne se aapko code likhne mein help milta hai aur code ka execution time aur memory ka use kam hota hai. Syntax ke rules follow karne se aapko code ka quality improve hota hai aur code ko maintain aur debug karne mein help karta hai.\n\n📌 Note: C++ programming mein, variables ko declare karne ke baad, aapko variable ko initialize karna hoga. Initialize karne ke liye, aapko variable ke saath data assign karna hoga. Initialize karne ke baad, aapko unki value change kar sakte hai.\n\n📌 C++ programming mein, data types ke saath, variables ko declare karne ke liye, aapko data type ka use karna hoga. Data type, variable ke saath store karne ke liye allowed hone wale data ko define karne ke liye use hota hai.\n\n📌 C++ programming mein, variables ko declare karne ke baad, aapko variable ko use kar sakte hai. Use karne ke baad, aapko variable ko change kar sakte hai aur aapko variable mein data ko access aur manipulate kar sakte hai.\n\n📌 C++ programming mein, syntax ke rules follow karne se aapko code likhne mein help milta hai aur code ka execution time aur memory ka use kam hota hai. Syntax ke rules follow karne se aapko code ka quality improve hota hai aur code ko maintain aur debug karne mein help karta hai.\n\n📌 Note: C++ programming mein, variables ko declare karne ke baad, aapko variable ko initialize karna hoga. Initialize karne ke liye, aapko variable ke saath data assign karna hoga. Initialize karne ke baad, aapko unki value change kar sakte hai.\n\n📌 C++ programming mein, data types ke saath, variables ko declare karne ke liye, aapko data type ka use karna hoga. Data type, variable ke saath store karne ke liye allowed hone wale data ko define karne ke liye use hota hai.\n\n📌 C++ programming mein, variables ko declare karne ke baad, aapko variable ko use kar sakte hai. Use karne ke baad, aapko variable ko change kar sakte hai aur aapko variable mein data ko access aur manipulate kar sakte hai.\n\n"
    },
    {
        "id": "9",
        "name": "Operators",
        "message": "📌 C++ programming mein, operators, variables aur constants ke saath, data ko manipulate karne ke liye use hoti hai. Operators, variable ko manipulate karne ke liye use hoti hai.\n\n📌 C++ programming mein, operators ke kuch types hain. Yeh hain:\n\n📍 1: Arithmetic Operators: Yeh operators, arithmetic calculations ke liye use hai. Yeh hain: + (addition), - (subtraction), * (multiplication), / (division), % (modulus).\n\nExample:\n\n#include <iostream>\nint main() {\n    int a = 10;\n    int b = 20;\n    int c;\n\n    c = a + b;\n    std::cout << \"Addition: \" << c << std::endl;\n    c = a - b;\n    std::cout << \"Subtraction: \" << c << std::endl;\n    c = a * b;\n    std::cout << \"Multiplication: \" << c << std::endl;\n    c = a / b;\n    std::cout << \"Division: \" << c << std::endl;\n    c = a % b;\n    std::cout << \"Modulus: \" << c << std::endl;\n    return 0;\n}\n\n📌 Is example mein, arithmetic operators ke saath, arithmetic calculations ke liye use kiya gaya hai.\n\n📍 2: Relational Operators: Yeh operators, data ko compare karne ke liye use hai. Yeh hain: == (equal to), != (not equal to), < (less than), > (greater than), <= (less than or equal to), >= (greater than or equal to).\n\nExample:\n\n#include <iostream>\nint main() {\n    int a = 10;\n    int b = 20;\n    int c;\n\n    c = (a == b);\n    std::cout << \"Equal to: \" << c << std::endl;\n    c = (a != b);\n    std::cout << \"Not equal to: \" << c << std::endl;\n    c = (a < b);\n    std::cout << \"Less than: \" << c << std::endl;\n    c = (a > b);\n    std::cout << \"Greater than: \" << c << std::endl;\n    c = (a <= b);\n    std::cout << \"Less than or equal to: \" << c << std::endl;\n    c = (a >= b);\n    std::cout << \"Greater than or equal to: \" << c << std::endl;\n    return 0;\n}\n\n📌 Is example mein, relational operators ke saath, data ko compare kiya gaya hai.\n\n📍 3: Logical Operators: Yeh operators, data ko logical AND, OR aur NOT karne ke liye use hai. Yeh hain: && (logical AND), || (logical OR), ! (logical NOT).\n\nExample:\n\n#include <iostream>\nint main() {\n    int a = 10;\n    int b = 20;\n    int c;\n\n    c = (a < b) && (a == 10);\n    std::cout << \"Logical AND: \" << c << std::endl;\n    c = (a < b) || (a == 20);\n    std::cout << \"Logical OR: \" << c << std::endl;\n    c = !(a < b);\n    std::cout << \"Logical NOT: \" << c << std::endl;\n    return 0;\n}\n\n📌 Is example mein, logical operators ke saath, data ko logical AND, OR aur NOT kar diya gaya hai.\n\n📍 4: Assignment Operators: Yeh operators, variable ko initialize aur assign karne ke liye use hai. Yeh hain: = (assignment), += (addition assignment), -= (subtraction assignment), *= (multiplication assignment), /= (division assignment), %= (modulus assignment).\n\nExample:\n\n#include <iostream>\nint main() {\n    int a = 10;\n    int b = 20;\n    int c;\n\n    c = a;\n    std::cout << \"Assignment: \" << c << std::endl;\n    c += a;\n    std::cout << \"Addition assignment: \" << c << std::endl;\n    c -= a;\n    std::cout << \"Subtraction assignment: \" << c << std::endl;\n    c *= a;\n    std::cout << \"Multiplication assignment: \" << c << std::endl;\n    c /= a;\n    std::cout << \"Division assignment: \" << c << std::endl;\n    c %= a;\n    std::cout << \"Modulus assignment: \" << c << std::endl;\n    return 0;\n}\n\n📌 Is example mein, assignment operators ke saath, variable ko initialize aur assign kiya gaya hai.\n\n\n📌 Note: C++ programming mein, operators ke saath, variables aur constants ke saath, data ko manipulate kar sakte hai. Operators, variable ko manipulate karne ke liye use hoti hai.\n\n"
    },
    {
        "id": "10",
        "name": "String",
        "message": ""
    },
    {
        "id": "11",
        "name": "User Input",
        "message": ""
    },
    {
        "id": "12",
        "name": "if else",
        "message": ""
    },
    {
        "id": "13",
        "name": "while Loop",
        "message": ""
    },
    {
        "id": "14",
        "name": "do while Loop",
        "message": ""
    },
    {
        "id": "15",
        "name": "for Loop",
        "message": ""
    },
    {
        "id": "16",
        "name": "continue Statement",
        "message": ""
    },
    {
        "id": "17",
        "name": "break Statement",
        "message": ""
    },
    {
        "id": "18",
        "name": "switch Loop",
        "message": ""
    },
    {
        "id": "19",
        "name": "Exception Handling",
        "message": ""
    },
    {
        "id": "20",
        "name": "try catch",
        "message": ""
    },
    {
        "id": "21",
        "name": "goto statement",
        "message": ""
    },
    {
        "id": "22",
        "name": "Array in c++",
        "message": ""
    },
    {
        "id": "23",
        "name": "Array Traversing",
        "message": ""
    },
    {
        "id": "24",
        "name": "Multidimensional Array",
        "message": ""
    },
    {
        "id": "25",
        "name": "Structure in c++",
        "message": ""
    },
    {
        "id": "26",
        "name": "Reference Variable",
        "message": ""
    },
    {
        "id": "27",
        "name": "Pointers in c++",
        "message": ""
    },
    {
        "id": "28",
        "name": "Function in c++",
        "message": ""
    },
    {
        "id": "29",
        "name": "Parameterized Function",
        "message": ""
    },
    {
        "id": "30",
        "name": "Recursive Function",
        "message": ""
    },
    {
        "id": "31",
        "name": "Function Call By Value And Call By Reference",
        "message": ""
    },
    {
        "id": "32",
        "name": "OOPs Concepts Introduction",
        "message": ""
    },
    {
        "id": "33",
        "name": "Class And Object",
        "message": ""
    },
    {
        "id": "34",
        "name": "Static Members",
        "message": ""
    },
    {
        "id": "35",
        "name": "Non-Static Members",
        "message": ""
    },
    {
        "id": "36",
        "name": "Constructor And Destructor",
        "message": ""
    },
    {
        "id": "37",
        "name": "Access Specifiers",
        "message": ""
    },
    {
        "id": "38",
        "name": "Encapsulation",
        "message": ""
    },
    {
        "id": "39",
        "name": "Inheritance",
        "message": ""
    },
    {
        "id": "40",
        "name": "Multilevel Inheritance",
        "message": ""
    },
    {
        "id": "41",
        "name": "Multiple Inheritance",
        "message": ""
    },
    {
        "id": "42",
        "name": "Method Overloading",
        "message": ""
    },
    {
        "id": "43",
        "name": "Method Overriding",
        "message": ""
    },
    {
        "id": "44",
        "name": "Polymorphism",
        "message": ""
    },
    {
        "id": "45",
        "name": "Friend Function",
        "message": ""
    },
    {
        "id": "46",
        "name": "Virtual Function",
        "message": ""
    },
    {
        "id": "47",
        "name": "Virtual Destructor",
        "message": ""
    }
]

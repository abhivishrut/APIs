[
    {
        "id": "1",
        "name": "Introduction",
        "message": "🔴 C++ programming ek popular programming language hai jo object-oriented programming ke concepts ke through program design karna allow karta hai. C++ programming ko 1985 me Bjarne Stroustrup ne develop kiya tha, jo C programming ki ek upgrade hai.\n\nC++ programming mein hum object-oriented programming ke 4 basic principles ko follow karte hai: encapsulation, inheritance, polymorphism, and abstraction.\n\n📌~1. Encapsulation: Iski madad se hum data aur functions ko ek sath package kar sakte hai aur iska use ek object ke through kar sakte hai.\n\n📌~2. Inheritance: Iski madad se hum ek class ke features ko doosre class me inherit kar sakte hai, jisse code ka reuse ho jaata hai.\n\n📌~3. Polymorphism: Iski madad se hum ek function ko doosre function ke roop me use kar sakte hai.\n\n📌~4. Abstraction: Iski madad se hum data aur functions ko abstract kar sakte hai, jisse code ka complexity kam hota hai.\n\n🔴 C++ programming mein hum classes, objects, functions, loops, conditionals, pointers, arrays, strings, etc. ka use kar sakte hai. Iske alawa, C++ mein hum exception handling, templates, namespaces, STL (Standard Template Library), etc. ka use bhi kar sakte hai.\n\n🔴 C++ programming ko maine jo bataaya tha, uske alawa bahut sare features hai jo aap C++ programming ko override karne ke liye use kar sakte hai. C++ programming ko commercial software development, game development, embedded systems, etc. me use kiya jata hai.\n\n",
        "example": "0",
        "remcont": "0"
    },
    {
        "id": "2",
        "name": "Installation",
        "message": "🔴 C++ ke liye aapko ek compiler ki zarurat hoti hai. Windows par, MinGW (Minimalist GNU for Windows) ek popular option hai. Niche diye gaye steps ko follow karein:\n\n📌~MinGW Download Karein: Sabse pehle, aapko MinGW ki official website par jaana hoga aur wahan se MinGW ka installer download karna hoga.\n\n📌~MinGW Install Karein: Download hone ke baad, installer ko run karein aur instructions follow karte hue MinGW ko install karein. Default settings par hi rehne dein.\n\n📌~Environment Variables Set Karein: MinGW install karne ke baad, aapko apne system ke environment variables me MinGW directory ko add karna hoga. Iske liye, System Properties > Advanced > Environment Variables par jaayein, aur ‘Path’ variable me MinGW directory ka path add karein.\n\n📌~Verify Karein: Installation verify karne ke liye, Command Prompt open karein aur g++ --version likh kar enter press karein. Agar aapko g++ ka version dikhai de raha hai, toh matlab hai ki MinGW sahi se install ho gaya hai.\n\n🔴 Ab aap apne system par C++ programs likh sakte hain aur unhe compile kar sakte hain.",
        "example": "0",
        "remcont": "0"
    },
    {
        "id": "3",
        "name": "Syntax",
        "message": "🔴 C++ ka syntax bahut simple hai. Niche maine kuch basic syntax elements ko explain kiya hai:\n\n📌~Variables: Variables data store karne ke liye use hote hain. Har variable ka ek type hota hai, jaise int (integer), float (floating point number), char (character), etc. Variable declare karne ke liye, pehle uska type likha jata hai, phir uska naam. Jaise, int myVar;.\n\n📌~Functions: Functions ek group of statements hote hain jo ek specific task perform karte hain. Function declare karne ke liye, pehle uska return type likha jata hai, phir uska naam, aur phir parentheses (). Jaise, void myFunction() { /* code */ }.\n\n📌~Loops: Loops ek sequence of statements ko bar bar execute karne ke liye use hote hain. C++ me teen types ke loops hote hain: for, while, aur do...while.\n\n📌~Conditionals: Conditionals ek specific condition ke basis par different code blocks execute karne ke liye use hote hain. C++ me if, else if, aur else statements use kiye jate hain conditions check karne ke liye.\n\n📌~Classes and Objects: C++ ek object-oriented programming language hai, isliye isme classes aur objects ka use hota hai. Class ek blueprint hoti hai jisme methods aur variables define kiye jate hain. Object class ka instance hota hai.",
        "example": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, AbhiVishrut is here!\";\n    return 0;\n}",
        "remcont": "Yeh tha C++ ka basic syntax.\n\n📌~#include <iostream>: Ye line iostream library ko include karti hai jo input-output operations ke liye use hoti hai.\n\n📌~int main(): Ye main function hai jahan se program start hota hai.\n\n📌~std::cout << \"Hello, AbhiVishrut is here!\";: Ye line console par “Hello, World!” print karti hai.\n\n📌~return 0;: Ye line program ke end par 0 return karti hai, jo program successfully run ho gaya hai iska indication hota hai.\n\nI hope ye example helpful hoga."
    },
    {
        "id": "4",
        "name": "Run First Program",
        "message": "🔴 C++ me “Hello, World!” program likhne aur run karne ke steps diye hain:\n\n📌~C++ Program Likho: Sabse pehle, aapko ek text editor (jaise Notepad, Sublime Text, ya Visual Studio Code) me C++ program likhna hoga. Niche ek basic “Hello, World!” program ka example diya gaya hai:",
        "example": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\";\n    return 0;\n}\n",
        "remcont": "📌~Program Save Karein: Program likhne ke baad, use .cpp extension ke sath save karein. Jaise, hello_world.cpp.\n\n📌~Program Compile Karein: Ab, Command Prompt ya Terminal open karein, aur jahan aapne apna program save kiya hai, wahan jaayein. Fir, g++ hello_world.cpp -o hello_world command type karein aur Enter press karein. Ye command aapke program ko compile karegi aur ek executable file generate karegi jiska naam hello_world hoga.\n\n📌~Program Run Karein: Program run karne ke liye, ./hello_world command type karein aur Enter press karein. Aapko “Hello, World!” output dikhega.\n\nYe tha C++ me pehla program likhne aur run karne ka tarika."
    },
    {
        "id": "5",
        "name": "Comments in C++",
        "message": "🔴 C++ me comments code ki readability badhane ke liye use kiye jate hain. Ye compiler dwara ignore kiye jate hain. C++ me do tarah ke comments hote hain:\n\n📌~Single Line Comments: Single line comments ke liye // ka use kiya jata hai. Iske baad jo bhi line me likha jata hai, wo comment maana jata hai.\n\n📌~Multi-line Comments: Multi-line ya block comments ke liye /* se start hota hai aur */ se end hota hai. Iske beech jo bhi likha jata hai, wo comment maana jata hai.",
        "example": "// Ye ek single line comment hai\nint x = 5; // Ye variable 'x' ko declare kar raha hai\n\n/*\nYe ek multi-line comment hai.\nIsme aap multiple lines me comment likh sakte hain.\n*/\nint x = 5;",
        "remcont": "🔴 Comments ka use karke aap apne code ko samajhne me asaan bana sakte hain, aur dusre developers ke liye bhi ye helpful hota hai."
    },
    {
        "id": "6",
        "name": "Variables",
        "message": "🔴 C++ me variables ek tarah ke containers hote hain jo data store karte hain. Har variable ka ek naam (identifier) hota hai jisse usko refer kiya jata hai. Niche maine kuch basic types ke variables declare karne ke examples diye hain:\n\n📌~Integer (int): Ye integer values store karta hai. \n\n📌~Floating Point (float): Ye decimal point wale numbers store karta hai.\n\n📌~Double: Ye bhi decimal point wale numbers store karta hai, lekin iski precision float se jyada hoti hai.\n\n📌~Character (char): Ye single characters store karta hai.\n\n📌~String: Ye text strings store karta hai.\n\n📌~Boolean (bool): Ye true ya false values store karta hai.",
        "example": "//Integer (int)\nint myVar = 5;\n\n//Floating Point (float)\nfloat myVar = 5.5;\n\n//Double\ndouble myVar = 5.5555555555;\n\n//Character (char)\nchar myVar = 'a';\n\n//String\nstd::string myVar = \"Hello, World!\";\n\n//Boolean (bool)\nbool myVar = true;",
        "remcont": "Ye the C++ ke kuch basic variable types. Har ek variable type ka apna ek specific use hota hai, aur ye depend karta hai ki aap kis tarah ka data store karna chahte hain."
    },
    {
        "id": "7",
        "name": "Constant Variables",
        "message": "🔴 C++ me constant variables ko const keyword ka use karke declare kiya jata hai. Ek baar constant variable ko value assign kar di gayi ho, toh uski value change nahi ki ja sakti. Yahan ek example diya gaya hai:",
        "example": "const int myVar = 5;",
        "remcont": "🔴 Isme, myVar ek constant variable hai jiska type int hai, aur uski value 5 hai. Ab agar aap myVar ki value change karne ki koshish karenge, toh compiler ek error dega.\n\n🔴 Constant variables ka use tab kiya jata hai jab aapko kisi variable ki value ko protect karna ho ki wo accidentally change na ho jaye."
    },
    {
        "id": "8",
        "name": "Data Types",
        "message": "🔴 C++ me kai tarah ke data types hote hain. Niche maine kuch basic data types ke examples diye hain:\n\n📌~Integer (int): Ye integer values store karta hai.\n\n📌~Floating Point (float): Ye decimal point wale numbers store karta hai.\n\n📌~Double: Ye bhi decimal point wale numbers store karta hai, lekin iski precision float se jyada hoti hai.\n\n📌~Character (char): Ye single characters store karta hai.\n\n📌~String: Ye text strings store karta hai.\n\n📌~Boolean (bool): Ye true ya false values store karta hai.",
        "example": "//Integer (int)\nint myVar = 5;\n\n//Floating Point (float)\nfloat myVar = 5.5;\n\n//Double\ndouble myVar = 5.5555555555;\n\n//Character (char)\nchar myVar = 'a';\n\n//String\nstd::string myVar = \"Hello, World!\";\n\n//Boolean (bool)\nbool myVar = true;",
        "remcont": "🔴 Ye the C++ ke kuch basic data types. Har ek data type ka apna ek specific use hota hai, aur ye depend karta hai ki aap kis tarah ka data store karna chahte hain. "
    },
    {
        "id": "9",
        "name": "Operators",
        "message": "🔴 C++ me kai tarah ke operators hote hain jo different operations perform karte hain. Niche maine kuch basic operators ke examples diye hain:\n\nArithmetic Operators: Ye basic mathematical operations perform karte hain.\n\nAssignment Operators: Ye variables ko values assign karte hain.\n\nComparison Operators: Ye two values ko compare karte hain aur ek boolean (true ya false) value return karte hain.\n\nLogical Operators: Ye logical operations (AND, OR, NOT) perform karte hain.",
        "example": "//Arithmetic Operators\nint x = 5;\nint y = 2;\nint z = x + y; // Addition\nz = x - y; // Subtraction\nz = x * y; // Multiplication\nz = x / y; // Division\nz = x % y; // Modulus (remainder of division)\n\n//Assignment Operators\nint x = 5; // '=' is an assignment operator\n\n//Comparison Operators\nint x = 5;\nint y = 2;\nboolean z;\n\nz = (x == y); // Equal to\nz = (x != y); // Not equal to\nz = (x > y); // Greater than\nz = (x < y); // Less than\nz = (x >= y); // Greater than or equal to\nz = (x <= y); // Less than or equal to\n\n//Logical Operators\nbool x = true;\nbool y = false;\nbool z = x && y; // Logical AND\nz = x || y; // Logical OR\nz = !x; // Logical NOT",
        "remcont": "Ye the C++ ke kuch basic operators. Har ek operator ka apna ek specific use hota hai, aur ye depend karta hai ki aap kis tarah ka operation perform karna chahte hain."
    },
    {
        "id": "10",
        "name": "String",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "11",
        "name": "User Input",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "12",
        "name": "if else",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "13",
        "name": "while Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "14",
        "name": "do while Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "15",
        "name": "for Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "16",
        "name": "continue Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "17",
        "name": "break Statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "18",
        "name": "switch Loop",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "19",
        "name": "Exception Handling",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "20",
        "name": "try catch",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "21",
        "name": "goto statement",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "22",
        "name": "Array in c++",
        "message": ""
    },
    {
        "id": "23",
        "name": "Array Traversing",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "24",
        "name": "Multidimensional Array",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "25",
        "name": "Structure in c++",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "26",
        "name": "Reference Variable",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "27",
        "name": "Pointers in c++",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "28",
        "name": "Function in c++",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "29",
        "name": "Parameterized Function",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "30",
        "name": "Recursive Function",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "31",
        "name": "Function Call By Value And Call By Reference",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "32",
        "name": "OOPs Concepts Introduction",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "33",
        "name": "Class And Object",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "34",
        "name": "Static Members",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "35",
        "name": "Non-Static Members",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "36",
        "name": "Constructor And Destructor",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "37",
        "name": "Access Specifiers",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "38",
        "name": "Encapsulation",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "39",
        "name": "Inheritance",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "40",
        "name": "Multilevel Inheritance",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "41",
        "name": "Multiple Inheritance",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "42",
        "name": "Method Overloading",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "43",
        "name": "Method Overriding",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "44",
        "name": "Polymorphism",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "45",
        "name": "Friend Function",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "46",
        "name": "Virtual Function",
        "message": "",
        "example": "",
        "remcont": ""
    },
    {
        "id": "47",
        "name": "Virtual Destructor",
        "message": "",
        "example": "",
        "remcont": ""
    }
]
